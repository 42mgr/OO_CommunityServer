name: Build Complete OnlyOffice .deb - Fixed Version

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      force_download:
        description: 'Force download fresh .deb package'
        required: false
        default: false
        type: boolean

jobs:
  extract-original-deb:
    runs-on: ubuntu-latest
    outputs:
      deb-cache-key: ${{ steps.cache-key.outputs.key }}
    steps:
    - name: Generate cache key for .deb
      id: cache-key
      run: |
        # Create a cache key based on the week (updates weekly)
        echo "key=onlyoffice-deb-extracted-$(date +%Y-W%U)" >> $GITHUB_OUTPUT
        
    - name: Check if extracted .deb is cached
      id: cache-check
      uses: actions/cache@v3
      with:
        path: deb-extracted
        key: ${{ steps.cache-key.outputs.key }}
        
    - name: Download and extract original .deb
      if: steps.cache-check.outputs.cache-hit != 'true' || github.event.inputs.force_download == 'true'
      run: |
        #!/bin/bash
        set -e
        
        # ───────── CONFIG ─────────
        KEY_URL="https://download.onlyoffice.com/repo/onlyoffice.key"
        REPO_BASE_URL="https://download.onlyoffice.com/repo/debian"
        DIST="squeeze"
        ARCH="amd64"
        PACKAGE="onlyoffice-communityserver"
        
        # Download .deb
        echo "📦 Downloading original .deb package..."
        WORK_DIR=$(mktemp -d)
        curl -fsSL "$KEY_URL" | gpg --dearmor > "$WORK_DIR/onlyoffice.gpg"
        
        INDEX_URL="$REPO_BASE_URL/dists/$DIST/main/binary-$ARCH/Packages.gz"
        curl -fsSL "$INDEX_URL" | gzip -d > "$WORK_DIR/Packages"
        
        DEB_URL=$(awk -v pkg="$PACKAGE" '
          $1 == "Package:" && $2 == pkg {found=1}
          found && $1 == "Filename:" { print $2; exit }
        ' "$WORK_DIR/Packages")
        
        FULL_URL="$REPO_BASE_URL/$DEB_URL"
        curl -fsSL -o original.deb "$FULL_URL"
        
        echo "✅ Downloaded original.deb"
        ls -lh original.deb
        
        # Extract .deb
        echo "📦 Extracting original .deb..."
        mkdir -p deb-extracted
        cd deb-extracted
        dpkg-deb -R ../original.deb .
        
        echo "✅ Extraction complete"
        
        # Create metadata file
        echo "📝 Creating metadata..."
        cat > .metadata << EOF
        Extracted-Date: $(date -u +%Y-%m-%dT%H:%M:%SZ)
        Original-URL: $FULL_URL
        Package-Name: $PACKAGE
        EOF
        
        # Show extraction summary
        echo "📊 Extraction summary:"
        find . -maxdepth 3 -type d | head -20
        echo "Total files: $(find . -type f | wc -l)"
        
        # Cleanup
        rm -f ../original.deb
        
    - name: Prepare extracted package for DLL replacement
      run: |
        echo "📋 Identifying mail assemblies in extracted .deb package..."
        
        cd deb-extracted
        
        # List existing ASC.Mail*.dll files for reference
        echo "📍 Current mail assemblies in package:"
        find . -name "ASC.Mail*.dll" -type f | while read -r dll_file; do
          echo "  Found: $dll_file ($(stat -c%s "$dll_file") bytes)"
        done
        
        echo "✅ Package ready for DLL replacement during final assembly step"
        
    - name: Display cache status
      run: |
        if [ "${{ steps.cache-check.outputs.cache-hit }}" == "true" ] && [ "${{ github.event.inputs.force_download }}" != "true" ]; then
          echo "✅ Using cached .deb extraction"
          if [ -f deb-extracted/.metadata ]; then
            echo "📋 Cache metadata:"
            cat deb-extracted/.metadata
          fi
        else
          echo "🔄 Fresh .deb download and extraction completed"
        fi
        
    - name: Upload extracted .deb
      uses: actions/upload-artifact@v4
      with:
        name: deb-extracted
        path: deb-extracted/
        retention-days: 1

  build-windows:
    runs-on: windows-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0  # Fetch all history
        
    - name: Show git status
      run: |
        Write-Host "📍 Current branch and commit info:"
        git branch -v
        git log -1 --oneline
        Write-Host "`n📋 Git status:"
        git status
        Write-Host "`n🔍 Recent commits:"
        git log -5 --oneline
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 'lts/*'
        
    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v1.3.1
      
    - name: Set up .NET SDK
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '5.0'
        
    - name: Aggressive cleanup for truly fresh build
      run: |
        Write-Host "🧹 Performing aggressive cleanup to eliminate all cached artifacts..."
        
        # Remove all build outputs and intermediate files
        Write-Host "Removing all build directories..."
        Get-ChildItem -Recurse -Directory -Name @("bin", "obj", "Release", "Debug", "deploy") -ErrorAction SilentlyContinue | 
          ForEach-Object { 
            Write-Host "  Removing: $_"
            Remove-Item $_ -Recurse -Force -ErrorAction SilentlyContinue 
          }
        
        # Remove any existing mail assemblies throughout the repository
        Write-Host "Removing all mail-related DLLs..."
        Get-ChildItem -Recurse -Filter "ASC.Mail*.dll" -ErrorAction SilentlyContinue | 
          ForEach-Object { 
            Write-Host "  Removing cached DLL: $($_.FullName)"
            Remove-Item $_ -Force -ErrorAction SilentlyContinue 
          }
        
        # Remove PDB files
        Get-ChildItem -Recurse -Filter "ASC.Mail*.pdb" -ErrorAction SilentlyContinue | 
          Remove-Item -Force -ErrorAction SilentlyContinue
        
        # Clear all NuGet caches to prevent stale package restoration
        Write-Host "🗑️ Clearing all NuGet caches..."
        nuget locals all -clear -ErrorAction SilentlyContinue
        dotnet nuget locals all --clear -ErrorAction SilentlyContinue
        
        # Clear MSBuild cache and temporary files
        Write-Host "🗑️ Clearing MSBuild caches..."
        if (Test-Path "$env:LOCALAPPDATA\Microsoft\MSBuild") {
          Remove-Item "$env:LOCALAPPDATA\Microsoft\MSBuild\*" -Recurse -Force -ErrorAction SilentlyContinue
        }
        if (Test-Path "$env:TEMP\MSBuild") {
          Remove-Item "$env:TEMP\MSBuild" -Recurse -Force -ErrorAction SilentlyContinue
        }
        
        # Clear temporary NuGet files
        if (Test-Path "$env:TEMP\NuGetScratch") {
          Remove-Item "$env:TEMP\NuGetScratch" -Recurse -Force -ErrorAction SilentlyContinue
        }
        
        Write-Host "✅ Aggressive cleanup complete - guaranteed fresh build environment"
        
    - name: Restore NuGet packages with fresh cache
      run: |
        Write-Host "📦 Restoring NuGet packages with completely fresh cache..."
        # Force English output and no cache to ensure fresh downloads
        nuget restore -ForceEnglishOutput -NoCache -Verbosity detailed
        
    - name: Force clean and build solution
      run: |
        Write-Host "🔨 Force clean and build solution..."
        # First clean to remove any remaining artifacts
        msbuild build/msbuild/build.proj /p:Configuration=Release /t:Clean /flp:LogFile=Clean.log /verbosity:minimal /nologo
        
        # Then build fresh
        msbuild build/msbuild/build.proj /p:Configuration=Release /flp:LogFile=Build.log /verbosity:minimal /nologo
        
    - name: Deploy solution
      run: |
        Write-Host "🚀 Deploying solution..."
        msbuild build/msbuild/deploy.proj /p:Configuration=Release /flp:LogFile=Deploy.log /verbosity:minimal /nologo
        
    - name: Verify duplication fix in built DLL
      run: |
        Write-Host "🔍 CRITICAL: Verifying duplication fix is applied..."
        
        # Find the deployed ASC.Mail.dll (this is what gets packaged)
        $mailDll = Get-ChildItem -Recurse -Filter "ASC.Mail.dll" -ErrorAction SilentlyContinue | 
                   Where-Object { $_.FullName -like "*deploy*" -or $_.FullName -like "*Release*" } |
                   Sort-Object LastWriteTime -Descending |
                   Select-Object -First 1
        
        if (-not $mailDll) {
          # Fallback to any built DLL
          $mailDll = Get-ChildItem -Recurse -Filter "ASC.Mail.dll" -ErrorAction SilentlyContinue | 
                     Sort-Object LastWriteTime -Descending | Select-Object -First 1
        }
        
        if ($mailDll) {
          Write-Host "📍 Verifying DLL: $($mailDll.FullName)"
          Write-Host "📅 Built: $($mailDll.LastWriteTime)"
          Write-Host "📏 Size: $($mailDll.Length) bytes"
          
          # Check for problematic duplication methods
          $hasOldCode = Select-String -Path $mailDll.FullName -Pattern "ProcessIncomingEmailForCrm" -Quiet
          
          if ($hasOldCode) {
            Write-Host "❌ CRITICAL FAILURE: Duplication code 'ProcessIncomingEmailForCrm' still present!"
            Write-Host "❌ The build did not properly apply source code changes"
            Write-Host "❌ This DLL will cause email duplication issues"
            throw "BUILD FAILED: Duplication code not removed from compiled DLL"
          } else {
            Write-Host "✅ SUCCESS: No 'ProcessIncomingEmailForCrm' method found"
            Write-Host "✅ Duplication fix successfully applied to built DLL"
          }
          
          # Verify CRM services are included
          $hasCrmService = Select-String -Path $mailDll.FullName -Pattern "WebCrmMonitoringService|CrmEmailAutoLinkService" -Quiet
          if ($hasCrmService) {
            Write-Host "✅ SUCCESS: CRM auto-linking services detected in DLL"
          } else {
            Write-Host "⚠️ WARNING: CRM auto-linking services not detected"
          }
          
        } else {
          Write-Host "❌ CRITICAL: No ASC.Mail.dll found after build"
          throw "BUILD FAILED: ASC.Mail.dll not found"
        }
        
    - name: Collect modified DLLs
      run: |
        Write-Host "📦 Collecting verified clean assemblies..."
        
        # Create a directory for modified files
        New-Item -ItemType Directory -Force -Path "modified-dlls"
        
        # Collect mail DLL with integrated CRM auto-linking service
        $targetFiles = @(
          "ASC.Mail.dll",
          "ASC.Mail.xml"
        )
        
        foreach ($fileName in $targetFiles) {
          Write-Host "Looking for $fileName..."
          $found = Get-ChildItem -Recurse -Filter $fileName -ErrorAction SilentlyContinue | 
                   Where-Object { $_.Directory.Name -like "*Release*" -or $_.Directory.Name -eq "bin" } |
                   Select-Object -First 1
          
          if ($found) {
            Write-Host "✅ Found: $($found.FullName)"
            Copy-Item $found.FullName "modified-dlls/"
            
            # Show file details for verification
            $fileInfo = Get-Item "modified-dlls/$fileName"
            Write-Host "  📏 Size: $($fileInfo.Length) bytes"
            Write-Host "  📅 Modified: $($fileInfo.LastWriteTime)"
          } else {
            Write-Host "⚠️ Not found: $fileName"
          }
        }
        
        Write-Host "`n📊 Verified clean assemblies collected:"
        Get-ChildItem "modified-dlls" | Format-Table Name, Length, LastWriteTime -AutoSize
        
        # Final verification
        if (Test-Path "modified-dlls/ASC.Mail.dll") {
          Write-Host "✅ ASC.Mail.dll with CRM Email Auto-Link Service (NO duplication) collected"
        } else {
          Write-Host "❌ ASC.Mail.dll not found - build failed"
          throw "Critical file missing"
        }
        
    - name: Upload modified DLLs
      uses: actions/upload-artifact@v4
      with:
        name: modified-dlls
        path: modified-dlls/
        retention-days: 1

  create-complete-deb:
    needs: [extract-original-deb, build-windows]
    runs-on: ubuntu-latest
    steps:
    - name: Download extracted .deb
      uses: actions/download-artifact@v4
      with:
        name: deb-extracted
        path: deb-contents/
        
    - name: Download modified DLLs
      uses: actions/download-artifact@v4
      with:
        name: modified-dlls
        path: modified-dlls/
        
    - name: Display working directory contents
      run: |
        echo "📋 Working with:"
        echo "Extracted .deb metadata:"
        [ -f deb-contents/.metadata ] && cat deb-contents/.metadata || echo "No metadata found"
        echo ""
        echo "Modified files:"
        ls -la modified-dlls/
        
    - name: Replace modified DLLs
      run: |
        echo "🔄 Replacing modified files..."
        
        cd deb-contents
        
        # For each modified file, find and replace all instances
        for file in ../modified-dlls/*; do
          file_name=$(basename "$file")
          echo "Processing $file_name..."
          
          # Show original files being replaced
          find . -name "$file_name" -type f | while read -r target; do
            echo "  📍 Original: $target ($(stat -c%s "$target") bytes)"
            echo "  🔄 Replacing with: $file_name ($(stat -c%s "$file") bytes)"
            cp "$file" "$target"
            # Preserve original permissions
            chmod --reference="$target" "$file" 2>/dev/null || true
            echo "  ✅ Replaced: $target"
          done
        done
        
        echo "✅ All DLL replacements complete"
        
    - name: Verify final package DLLs
      run: |
        echo "🔍 Final verification of DLLs in package..."
        
        cd deb-contents
        
        # Check all ASC.Mail.dll files in the package
        find . -name "ASC.Mail.dll" -type f | while read -r dll_file; do
          echo "📍 Checking: $dll_file"
          
          # Verify no duplication code
          if strings "$dll_file" | grep -q "ProcessIncomingEmailForCrm"; then
            echo "❌ CRITICAL: Duplication code found in $dll_file"
            exit 1
          else
            echo "✅ Clean: No duplication code in $dll_file"
          fi
          
          # Verify CRM services are present
          if strings "$dll_file" | grep -q "WebCrmMonitoringService\|CrmEmailAutoLinkService"; then
            echo "✅ CRM services present in $dll_file"
          else
            echo "⚠️ Warning: CRM services not detected in $dll_file"
          fi
        done
        
        echo "✅ Final package verification complete"
        
    - name: Update package metadata
      run: |
        cd deb-contents
        
        # Update version to indicate custom build
        if [ -f DEBIAN/control ]; then
          echo "📋 Original control file:"
          cat -n DEBIAN/control
          echo ""
          
          # Get original version
          ORIG_VERSION=$(grep "^Version:" DEBIAN/control | cut -d' ' -f2)
          NEW_VERSION="${ORIG_VERSION}-crm-fixed-$(date +%Y%m%d)"
          
          echo "📝 Updating version from $ORIG_VERSION to $NEW_VERSION"
          
          # More robust approach: recreate the control file completely
          cat > DEBIAN/control << EOF
        Package: onlyoffice-communityserver
        Version: $NEW_VERSION
        Architecture: all
        Maintainer: Ascensio System SIA
        Installed-Size: 1634637
        Depends: debconf (>= 0.5) | debconf-2.0, mysql-server, mysql-client, mono-complete (>= 6.0), ca-certificates-mono, nginx (>= 1.9.5) | nginx-extras (>= 1.9.5), mono-webserver-hyperfastcgi, nodejs (>= 14.18.0), python3-pip, elasticsearch (= 7.16.3), redis-server, ffmpeg, dotnet-sdk-7.0
        Recommends: ruby-god
        Section: web
        Priority: optional
        Description: Community Server with CRM Email Auto-Linking (DUPLICATION FIXED)
        X-Custom-Build: true
        X-Build-Date: $(date -u +%Y-%m-%dT%H:%M:%SZ)
        X-Modified-Components: ASC.Mail.dll (CRM Auto-Link Service - Duplication Issue RESOLVED)
        X-Duplication-Status: FIXED
        EOF
          
          echo "📋 New control file:"
          cat -n DEBIAN/control
        fi
        
    - name: Rebuild .deb package
      run: |
        echo "📦 Building verified clean .deb package..."
        
        # Check current permissions
        echo "📋 Current DEBIAN permissions:"
        ls -la deb-contents/DEBIAN/
        
        # Fix permissions if needed
        find deb-contents -type d -exec chmod 755 {} \;
        find deb-contents/DEBIAN -type f -exec chmod 644 {} \;
        
        # Make all maintainer scripts executable
        [ -f deb-contents/DEBIAN/postinst ] && chmod 755 deb-contents/DEBIAN/postinst
        [ -f deb-contents/DEBIAN/preinst ] && chmod 755 deb-contents/DEBIAN/preinst
        [ -f deb-contents/DEBIAN/postrm ] && chmod 755 deb-contents/DEBIAN/postrm
        [ -f deb-contents/DEBIAN/prerm ] && chmod 755 deb-contents/DEBIAN/prerm
        [ -f deb-contents/DEBIAN/config ] && chmod 755 deb-contents/DEBIAN/config
        [ -f deb-contents/DEBIAN/templates ] && chmod 644 deb-contents/DEBIAN/templates
        
        echo "📋 Fixed DEBIAN permissions:"
        ls -la deb-contents/DEBIAN/
        
        # Build the package
        dpkg-deb -b deb-contents onlyoffice-communityserver-crm-fixed.deb
        
        echo "✅ Clean package built successfully"
        ls -lh onlyoffice-communityserver-crm-fixed.deb
        
        # Verify package
        echo "📋 Package info:"
        dpkg-deb -I onlyoffice-communityserver-crm-fixed.deb
        
    - name: Test package integrity
      run: |
        echo "🔍 Testing package integrity..."
        
        # Check if package is valid
        dpkg-deb -c onlyoffice-communityserver-crm-fixed.deb > /dev/null
        echo "✅ Package structure is valid"
        
        # List some contents
        echo "📦 Sample contents:"
        dpkg-deb -c onlyoffice-communityserver-crm-fixed.deb | grep -E "(\.dll|\.exe|\.config)" | head -20
        
        # Check that our modifications are included
        echo "🔍 Verifying modifications:"
        for file in modified-dlls/*; do
          file_name=$(basename "$file")
          if dpkg-deb -c onlyoffice-communityserver-crm-fixed.deb | grep -q "$file_name"; then
            echo "✅ Found modified: $file_name"
          else
            echo "❌ Missing: $file_name"
          fi
        done
        
    - name: Upload custom .deb
      uses: actions/upload-artifact@v4
      with:
        name: onlyoffice-crm-fixed-deb
        path: |
          onlyoffice-communityserver-crm-fixed.deb
        retention-days: 4
        
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: crm-fixed-1.0.${{ github.run_number }}
        name: CRM Fixed Build ${{ github.run_number }}
        body: |
          🎯 **OnlyOffice Community Server - CRM Auto-Link DUPLICATION FIXED**
          
          This build resolves the email duplication issue while maintaining CRM auto-linking functionality.
          
          **✅ FIXES:**
          - Removed ProcessIncomingEmailForCrm from MessageEngine/DraftEngine
          - Eliminated duplicate email processing pipelines
          - Verified clean build with no duplication code
          
          **✅ FEATURES:**
          - CRM Email Auto-Linking (WebCrmMonitoringService)
          - Background email processing (CrmEmailAutoLinkService)
          - Automatic contact matching and linking
          
          **🔧 Build Verification:**
          - Aggressive cache clearing
          - Force clean compilation
          - DLL duplication verification
          - Package integrity testing
        files: onlyoffice-communityserver-crm-fixed.deb

    - uses: dev-drprasad/delete-older-releases@v0.3.4
      with:
        repo: ${{ github.repository }}
        keep_latest: 3
        delete_tag_pattern: crm-fixed-
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Trigger Target Workflow
      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.PAT_TOKEN }}
        script: |
          await github.rest.actions.createWorkflowDispatch({
            owner: '42mgr',
            repo: 'OO_Docker-CommunityServer',
            workflow_id: 'build-docker.yml',
            ref: 'master'
          })