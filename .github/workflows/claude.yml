name: Build Custom OnlyOffice with Mail Module Changes

on:
  workflow_dispatch:
    inputs:
      force_rebuild:
        description: 'Force rebuild even if cached'
        type: boolean
        default: false
      skip_docker:
        description: 'Skip Docker image build'
        type: boolean
        default: false

env:
  ONLYOFFICE_VERSION: "12.7.1"  # Latest available version as of June 2025
  FORCE_REBUILD: ${{ github.event.inputs.force_rebuild || 'false' }}
  SKIP_DOCKER: ${{ github.event.inputs.skip_docker || 'false' }}
  # Alternative versions to try if main version fails
  FALLBACK_VERSIONS: "12.7.0,12.6.0,12.5.2,12.1.0,12.0.1"

jobs:
  # Fast preparation job with aggressive caching
  prepare-environment:
    runs-on: ubuntu-latest
    outputs:
      cache-hit-deb: ${{ steps.cache-deb.outputs.cache-hit }}
      cache-hit-extracted: ${{ steps.cache-extracted.outputs.cache-hit }}
      skip-build: ${{ steps.check-changes.outputs.skip-build }}
      
    steps:
    - name: Checkout code (shallow)
      uses: actions/checkout@v4
      with:
        fetch-depth: 1  # Shallow clone for speed
        submodules: false  # Skip submodules initially
        
    - name: Check for relevant changes
      id: check-changes
      run: |
        # Only check mail module files for changes
        CHANGED_FILES=$(git diff --name-only HEAD~1 2>/dev/null || echo "all")
        
        if [[ "$CHANGED_FILES" == "all" ]] || echo "$CHANGED_FILES" | grep -E "(module/ASC\.Mail|\.github/workflows)" > /dev/null; then
          echo "skip-build=false" >> $GITHUB_OUTPUT
          echo "üìù Changes detected in mail module or workflow"
        else
          echo "skip-build=true" >> $GITHUB_OUTPUT  
          echo "‚ö° No mail module changes detected"
        fi
        
    - name: Multi-level cache for DEB package
      id: cache-deb
      uses: actions/cache@v4
      with:
        path: onlyoffice-communityserver.deb
        key: onlyoffice-deb-v2-${{ env.ONLYOFFICE_VERSION }}
        restore-keys: |
          onlyoffice-deb-v2-
          onlyoffice-deb-
        
    - name: Multi-level cache for extracted package  
      id: cache-extracted
      uses: actions/cache@v4
      with:
        path: official-package/
        key: onlyoffice-extracted-v2-${{ env.ONLYOFFICE_VERSION }}-${{ hashFiles('onlyoffice-communityserver.deb') || 'no-deb' }}
        restore-keys: |
          onlyoffice-extracted-v2-${{ env.ONLYOFFICE_VERSION }}-
          onlyoffice-extracted-v2-
          
    - name: Install dependencies (parallel)
      if: steps.cache-deb.outputs.cache-hit != 'true' || steps.cache-extracted.outputs.cache-hit != 'true'
      run: |
        # Install in parallel and only what's needed
        sudo apt-get update -qq &
        wait
        sudo apt-get install -y --no-install-recommends wget curl dpkg-dev &
        wait
        
    - name: Check available OnlyOffice versions
      if: steps.cache-deb.outputs.cache-hit != 'true'
      run: |
        echo "üîç Checking available OnlyOffice versions..."
        
        # Check GitHub releases
        echo "GitHub releases:"
        curl -s "https://api.github.com/repos/ONLYOFFICE/CommunityServer/releases" | \
          jq -r '.[].tag_name' | head -5 || echo "GitHub API check failed"
        
        # Check what's available in download directory
        echo "Checking download.onlyoffice.com..."
        curl -s -I "https://download.onlyoffice.com/install/community/" || echo "Download site check failed"
        
        echo "Proceeding with configured version: ${{ env.ONLYOFFICE_VERSION }}"
        
    - name: Smart download with multiple sources
      if: steps.cache-deb.outputs.cache-hit != 'true'
      run: |
        echo "‚¨áÔ∏è Downloading OnlyOffice package..."
        
        # Multiple download URLs to try (with version fallbacks)
        VERSIONS_TO_TRY=("${{ env.ONLYOFFICE_VERSION }}" $(echo "${{ env.FALLBACK_VERSIONS }}" | tr ',' ' '))
        
        download_success=false
        
        for version in "${VERSIONS_TO_TRY[@]}"; do
          echo "üîÑ Trying version: $version"
          
          DOWNLOAD_URLS=(
            "https://github.com/ONLYOFFICE/CommunityServer/releases/download/v${version}/onlyoffice-communityserver_amd64.deb"
            "https://github.com/ONLYOFFICE/CommunityServer/releases/download/v${version}/onlyoffice-communityserver_${version}_amd64.deb"
            "https://download.onlyoffice.com/install/community/onlyoffice-communityserver_${version}_amd64.deb" 
            "https://download.onlyoffice.com/install/community/onlyoffice-communityserver_amd64.deb"
          )
          
          for url in "${DOWNLOAD_URLS[@]}"; do
            echo "  üì• Trying: $url"
            
            if wget --progress=dot:mega --timeout=120 --tries=2 \
              "$url" -O onlyoffice-communityserver.deb 2>&1; then
              
              # Validate download
              if [ -f "onlyoffice-communityserver.deb" ] && [ -s "onlyoffice-communityserver.deb" ]; then
                file_size=$(stat -c%s onlyoffice-communityserver.deb)
                if [ "$file_size" -gt 50000000 ]; then  # Must be > 50MB
                  echo "‚úÖ Download successful! Version: $version, Size: $(ls -lh onlyoffice-communityserver.deb | awk '{print $5}')"
                  download_success=true
                  break 2
                else
                  echo "  ‚ö†Ô∏è File too small ($file_size bytes), likely error page"
                  rm -f onlyoffice-communityserver.deb
                fi
              fi
            fi
            echo "  ‚ùå Failed: $url"
          done
          
          if [ "$download_success" = true ]; then
            break
          fi
        done
        
        # If direct downloads fail, try using the custom build script if available
        if [ "$download_success" = false ] && [ -f ".github/build-scripts/download-deb.sh" ]; then
          echo "üîÑ Trying custom download script..."
          chmod +x .github/build-scripts/download-deb.sh
          if sudo ./.github/build-scripts/download-deb.sh; then
            if [ -f "onlyoffice-communityserver.deb" ] && [ -s "onlyoffice-communityserver.deb" ]; then
              echo "‚úÖ Custom script download successful!"
              download_success=true
            fi
          fi
        fi
        
        # Final fallback - try APT repository method
        if [ "$download_success" = false ]; then
          echo "üîÑ Trying APT repository method..."
          
          # Add OnlyOffice repository
          wget -qO - https://download.onlyoffice.com/repo/4.0/debian/onlyoffice.key | sudo apt-key add -
          echo "deb https://download.onlyoffice.com/repo/4.0/debian stable main" | sudo tee /etc/apt/sources.list.d/onlyoffice.list
          
          sudo apt-get update -qq
          
          # Download package without installing
          if apt-get download onlyoffice-communityserver 2>/dev/null; then
            # Find the downloaded package
            deb_file=$(find . -name "onlyoffice-communityserver*.deb" -type f | head -1)
            if [ -n "$deb_file" ] && [ -s "$deb_file" ]; then
              mv "$deb_file" onlyoffice-communityserver.deb
              echo "‚úÖ APT download successful!"
              download_success=true
            fi
          fi
        fi
        
        if [ "$download_success" = false ]; then
          echo "‚ùå All download methods failed!"
          echo "üí° Please check if OnlyOffice ${{ env.ONLYOFFICE_VERSION }} is available"
          echo "üí° You may need to update ONLYOFFICE_VERSION or provide a custom download script"
          exit 1
        fi
        
        # Final validation and info
        echo "üì¶ Final package info:"
        ls -lh onlyoffice-communityserver.deb
        dpkg-deb --info onlyoffice-communityserver.deb | head -10
        
    - name: Fast extraction (only if needed)
      if: steps.cache-extracted.outputs.cache-hit != 'true'
      run: |
        echo "üì¶ Extracting package..."
        
        # Parallel extraction
        mkdir -p official-package
        dpkg-deb -x onlyoffice-communityserver.deb official-package/ &
        dpkg-deb -e onlyoffice-communityserver.deb official-package/DEBIAN/ &
        wait
        
        # Quick validation
        extracted_files=$(find official-package -type f | wc -l)
        if [ "$extracted_files" -gt 100 ]; then
          echo "‚úÖ Extracted $extracted_files files"
        else
          echo "‚ùå Extraction appears incomplete"
          exit 1
        fi

  # Optimized build job with smart caching
  build-mail-module:
    needs: prepare-environment
    runs-on: windows-latest
    if: needs.prepare-environment.outputs.skip-build != 'true' || github.event.inputs.force_rebuild == 'true'
    
    outputs:
      build-success: ${{ steps.verify-build.outputs.success }}
      
    steps:
    - name: Checkout with submodules (conditional)
      uses: actions/checkout@v4
      with:
        fetch-depth: 1
        submodules: recursive
        
    - name: Setup build environment (parallel)
      run: |
        # Setup .NET, MSBuild, and NuGet in parallel using background jobs
        $job1 = Start-Job -ScriptBlock {
          # This would be replaced by actual setup commands
          Write-Host "Setting up .NET..."
        }
        
        $job2 = Start-Job -ScriptBlock {
          Write-Host "Setting up MSBuild..."
        }
        
        $job3 = Start-Job -ScriptBlock {
          Write-Host "Setting up NuGet..."
        }
        
        # Wait for all setup jobs
        $job1, $job2, $job3 | Wait-Job | Receive-Job
        $job1, $job2, $job3 | Remove-Job
        
    - name: Setup .NET Framework and .NET SDK
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '6.0.x'  # Only what we need
        
    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v2
      
    - name: Setup NuGet
      uses: nuget/setup-nuget@v2
      
    - name: Aggressive cache for dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.nuget/packages
          packages/
          **/obj/
        key: build-deps-v3-${{ runner.os }}-${{ hashFiles('**/packages.config', '**/*.csproj', '**/*.sln') }}
        restore-keys: |
          build-deps-v3-${{ runner.os }}-
          build-deps-v2-${{ runner.os }}-
          
    - name: Smart build cache
      id: cache-build
      if: env.FORCE_REBUILD != 'true'
      uses: actions/cache@v4
      with:
        path: |
          **/bin/Release/
          Directory.Build.props
        key: build-output-v3-${{ runner.os }}-${{ hashFiles('module/ASC.Mail/**/*.cs', 'common/**/*.cs', 'web/**/*.cs') }}
        restore-keys: |
          build-output-v3-${{ runner.os }}-
          
    - name: Fast project reference fix (only if needed)
      if: steps.cache-build.outputs.cache-hit != 'true'
      shell: pwsh
      run: |
        Write-Host "üîß Fast project reference fix..."
        
        # Optimized GUID generation - use simple method by default
        function Get-FastGuid($projectName) {
          $hash = $projectName.GetHashCode()
          return ("{0:X8}-{1:X4}-{2:X4}-{3:X4}-{4:X12}" -f `
            ($hash -band 0xFFFFFFFF), `
            (($hash -shr 16) -band 0xFFFF), `
            (4000 + ($hash -band 0x0FFF)), `
            (0x8000 + (($hash -shr 8) -band 0x3FFF)), `
            ([Math]::Abs($hash) % 0xFFFFFFFFFFFF)).ToUpper()
        }
        
        # Only process mail module and dependencies
        $criticalProjects = @(
          "module/ASC.Mail/ASC.Mail/ASC.Mail.csproj",
          "common/ASC.Common/ASC.Common.csproj", 
          "common/ASC.Core.Common/ASC.Core.Common.csproj",
          "web/core/ASC.Web.Core/ASC.Web.Core.csproj"
        )
        
        $projectGuids = @{}
        $fixed = 0
        
        foreach ($proj in $criticalProjects) {
          if (Test-Path $proj) {
            $content = Get-Content $proj -Raw
            $pattern = '<ProjectReference\s+Include="([^"]+)"[^>]*?(?:\s*/>|>(.*?)</ProjectReference>)'
            $matches = [regex]::Matches($content, $pattern, 'Singleline')
            
            foreach ($match in $matches) {
              $includePath = $match.Groups[1].Value
              $innerContent = if ($match.Groups[2].Success) { $match.Groups[2].Value } else { "" }
              $projectName = [System.IO.Path]::GetFileNameWithoutExtension($includePath)
              
              if (-not $innerContent.Contains('<Project>')) {
                $guid = Get-FastGuid $projectName
                $newRef = "<ProjectReference Include=`"$includePath`">`n      <Project>{$guid}</Project>`n      <n>$projectName</n>`n    </ProjectReference>"
                $content = $content -replace [regex]::Escape($match.Value), $newRef
                $fixed++
              }
            }
            
            Set-Content -Path $proj -Value $content -Encoding UTF8
          }
        }
        
        Write-Host "‚úÖ Fixed $fixed references in critical projects"
        
        # Minimal Directory.Build.props
        @"
        <Project>
          <PropertyGroup>
            <Configuration Condition="`$(Configuration) == ''">Release</Configuration>
            <Platform Condition="`$(Platform) == ''">AnyCPU</Platform>
            <TreatWarningsAsErrors>false</TreatWarningsAsErrors>
            <BuildProjectReferences>true</BuildProjectReferences>
          </PropertyGroup>
        </Project>
        "@ | Set-Content -Path "Directory.Build.props" -Encoding UTF8
        
    - name: Fast NuGet restore (only what we need)
      if: steps.cache-build.outputs.cache-hit != 'true'
      shell: pwsh
      run: |
        Write-Host "üì¶ Fast NuGet restore..."
        
        # Only restore for mail module solution
        $mailSolution = "module/ASC.Mail/ASC.Mail.sln"
        if (Test-Path $mailSolution) {
          nuget restore $mailSolution -Verbosity quiet -NonInteractive
        } else {
          # Fallback to main solution
          $mainSolution = Get-ChildItem -Name "*.sln" | Select-Object -First 1
          if ($mainSolution) {
            nuget restore $mainSolution -Verbosity quiet -NonInteractive
          }
        }
        
    - name: Targeted build (mail module only)
      if: steps.cache-build.outputs.cache-hit != 'true'
      shell: pwsh
      run: |
        Write-Host "üèóÔ∏è Building mail module..."
        
        # Build only what we need for the mail module
        $mailProject = "module/ASC.Mail/ASC.Mail/ASC.Mail.csproj"
        
        if (Test-Path $mailProject) {
          msbuild $mailProject /p:Configuration=Release /p:Platform=AnyCPU /verbosity:minimal /maxcpucount
        } else {
          # Fallback to solution build
          $solution = Get-ChildItem -Name "*.sln" | Select-Object -First 1
          msbuild $solution /p:Configuration=Release /p:Platform="Any CPU" /verbosity:minimal /maxcpucount
        }
        
    - name: Verify build results
      id: verify-build
      shell: pwsh
      run: |
        Write-Host "üîç Searching for built assemblies..."
        $success = $false
        
        # Check multiple possible locations where ASC.Mail.dll might be built
        $possiblePaths = @(
          "module/ASC.Mail/ASC.Mail/bin/Release/ASC.Mail.dll",
          "web/studio/ASC.Web.Studio/bin/ASC.Mail.dll",
          "module/ASC.Mail/ASC.Mail/bin/ASC.Mail.dll"
        )
        
        $foundDlls = @()
        $currentDir = (Get-Location).Path
        
        foreach ($path in $possiblePaths) {
          if (Test-Path $path) {
            $dll = Get-Item $path
            Write-Host "‚úÖ Found ASC.Mail.dll at: $path"
            Write-Host "   Size: $($dll.Length) bytes"
            Write-Host "   Modified: $($dll.LastWriteTime)"
            $foundDlls += $path
            $success = $true
          }
        }
        
        # Also search for any ASC.Mail.dll files
        Write-Host "`nüîç Searching entire workspace for ASC.Mail.dll..."
        try {
          $allMailDlls = Get-ChildItem -Path "." -Name "ASC.Mail.dll" -Recurse -ErrorAction SilentlyContinue
          
          if ($allMailDlls -and $allMailDlls.Count -gt 0) {
            Write-Host "Found ASC.Mail.dll files:"
            foreach ($dll in $allMailDlls) {
              try {
                $relativePath = $dll.FullName
                if ($relativePath -and $currentDir) {
                  $relativePath = $relativePath.Replace($currentDir + "\", "").Replace($currentDir + "/", "")
                }
                $size = if ($dll.Length) { $dll.Length } else { "unknown" }
                Write-Host "  üìÅ $relativePath ($size bytes)"
                
                if ($foundDlls -notcontains $relativePath) {
                  $foundDlls += $relativePath
                  $success = $true
                }
              } catch {
                Write-Host "  ‚ö†Ô∏è Error processing file: $($dll.Name)"
              }
            }
          } else {
            Write-Host "No additional ASC.Mail.dll files found in workspace search"
          }
        } catch {
          Write-Host "‚ö†Ô∏è Error during workspace search: $($_.Exception.Message)"
        }
        
        if ($success) {
          Write-Host "`n‚úÖ Build successful! Found $($foundDlls.Count) ASC.Mail.dll file(s)"
          
          # Use the first found file as the main one
          $mainDllPath = $foundDlls[0]
          Write-Host "üìã Primary assembly: $mainDllPath"
          
          # Store the path for upload (ensure it's properly formatted)
          $outputPath = $mainDllPath -replace '\\', '/'
          echo "main_dll_path=$outputPath" >> $env:GITHUB_OUTPUT
          
          # Also store all found paths
          $allPaths = $foundDlls -join ','
          echo "all_dll_paths=$allPaths" >> $env:GITHUB_OUTPUT
          
        } else {
          Write-Host "`n‚ùå ASC.Mail.dll not found in any expected location"
          Write-Host "üîç Checking what was actually built..."
          
          # Show what DLLs were actually built
          try {
            $builtDlls = Get-ChildItem -Path "." -Name "*.dll" -Recurse -ErrorAction SilentlyContinue | 
              Where-Object { $_.DirectoryName -like "*bin*" } | 
              Select-Object -First 10
            
            if ($builtDlls) {
              Write-Host "Recently built DLLs:"
              foreach ($dll in $builtDlls) {
                try {
                  $relativePath = $dll.FullName.Replace($currentDir + "\", "").Replace($currentDir + "/", "")
                  Write-Host "  üìÑ $relativePath"
                } catch {
                  Write-Host "  üìÑ $($dll.Name)"
                }
              }
            } else {
              Write-Host "No DLL files found in bin directories"
            }
          } catch {
            Write-Host "Error searching for built DLLs: $($_.Exception.Message)"
          }
        }
        
        echo "success=$success" >> $env:GITHUB_OUTPUT
        
    - name: Upload build artifacts (conditional)
      if: steps.verify-build.outputs.success == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: mail-module-build
        path: |
          ${{ steps.verify-build.outputs.main_dll_path }}
          web/studio/ASC.Web.Studio/bin/ASC.Mail.*
          module/ASC.Mail/ASC.Mail/bin/Release/ASC.Mail.*
          module/ASC.Mail/ASC.Mail/bin/ASC.Mail.*
        retention-days: 1

  # Streamlined package creation
  create-custom-package:
    needs: [prepare-environment, build-mail-module]
    runs-on: ubuntu-latest
    if: always() && needs.prepare-environment.result == 'success'
    
    steps:
    - name: Download cached package
      uses: actions/cache/restore@v4
      with:
        path: |
          onlyoffice-communityserver.deb
          official-package/
        key: onlyoffice-extracted-v2-${{ env.ONLYOFFICE_VERSION }}-${{ hashFiles('onlyoffice-communityserver.deb') || 'no-deb' }}
        restore-keys: |
          onlyoffice-extracted-v2-${{ env.ONLYOFFICE_VERSION }}-
          
    - name: Download build artifacts (conditional)
      if: needs.build-mail-module.outputs.build-success == 'true'
      uses: actions/download-artifact@v4
      continue-on-error: true
      with:
        name: mail-module-build
        path: build-output/
        
    - name: Fast package creation
      run: |
        echo "üöÄ Fast package creation..."
        
        # Quick copy
        cp -r official-package custom-package
        
        # Replace mail module if we have a new one  
        if [ -d "build-output/" ]; then
          echo "üìã Searching for built mail assemblies..."
          
          # Find any ASC.Mail.dll files in the build output
          mail_dlls=$(find build-output -name "ASC.Mail.dll" -type f 2>/dev/null || true)
          
          if [ -n "$mail_dlls" ]; then
            echo "‚úÖ Found compiled mail assemblies:"
            echo "$mail_dlls"
            
            # Get the largest DLL file (most likely the main one)
            main_dll=$(echo "$mail_dlls" | xargs ls -la | sort -k5 -nr | head -1 | awk '{print $NF}')
            echo "üìã Using primary DLL: $main_dll"
            
            # Find all ASC.Mail.dll locations in the package and replace them
            package_dlls=$(find custom-package -name "ASC.Mail.dll" -type f 2>/dev/null || true)
            
            if [ -n "$package_dlls" ]; then
              echo "üîÑ Replacing mail assemblies in package:"
              while IFS= read -r dll_path; do
                if [ -f "$dll_path" ]; then
                  cp "$main_dll" "$dll_path"
                  echo "  ‚úÖ Updated: $dll_path"
                fi
              done <<< "$package_dlls"
              
              # Also copy any related files (PDB, XML, etc.)
              main_dll_dir=$(dirname "$main_dll")
              for ext in pdb xml exe.config; do
                if [ -f "${main_dll_dir}/ASC.Mail.$ext" ]; then
                  while IFS= read -r dll_path; do
                    base_path="${dll_path%.dll}.$ext"
                    base_dir=$(dirname "$dll_path")
                    if [ -f "$base_path" ] || [ -d "$base_dir" ]; then
                      cp "${main_dll_dir}/ASC.Mail.$ext" "$base_dir/" 2>/dev/null || true
                      echo "  ‚úÖ Updated: ASC.Mail.$ext in $base_dir"
                    fi
                  done <<< "$package_dlls"
                fi
              done
              
            else
              echo "‚ö†Ô∏è No ASC.Mail.dll files found in package to replace"
              # Create a new directory for the compiled assemblies
              mkdir -p custom-package/opt/onlyoffice/CommunityServer/bin/
              echo "$mail_dlls" | while read -r dll; do
                if [ -f "$dll" ]; then
                  cp "$dll" custom-package/opt/onlyoffice/CommunityServer/bin/
                  echo "  ‚úÖ Added: $(basename "$dll") to package"
                fi
              done
            fi
            
          else
            echo "‚ÑπÔ∏è No ASC.Mail.dll found in build output, using original mail module"
            echo "Available files in build-output:"
            find build-output -name "*.dll" -type f | head -10 || echo "No DLL files found"
          fi
        else
          echo "‚ÑπÔ∏è No build output available, using original mail module"
        fi
        
        # Comprehensive permission fix
        if [ -d "custom-package/DEBIAN" ]; then
          echo "üîß Fixing DEBIAN script permissions..."
          
          # Make all maintainer scripts executable (must be >=0555 and <=0775)
          for script in preinst postinst prerm postrm config templates; do
            if [ -f "custom-package/DEBIAN/$script" ]; then
              chmod 755 "custom-package/DEBIAN/$script"
              echo "‚úÖ Fixed $script: $(ls -la custom-package/DEBIAN/$script | awk '{print $1}')"
            fi
          done
          
          # Control and conffiles should be readable only
          chmod 644 custom-package/DEBIAN/control 2>/dev/null || true
          chmod 644 custom-package/DEBIAN/conffiles 2>/dev/null || true
          chmod 644 custom-package/DEBIAN/md5sums 2>/dev/null || true
          
          echo "üìã Final DEBIAN permissions:"
          ls -la custom-package/DEBIAN/ | head -5
        fi
        
        # Quick metadata update
        if [ -f "custom-package/DEBIAN/control" ]; then
          sed -i "s/Package: onlyoffice-communityserver/Package: onlyoffice-communityserver-custom/" custom-package/DEBIAN/control
          sed -i "s/Version: \(.*\)/Version: \1-custom-${{ github.run_number }}/" custom-package/DEBIAN/control
        fi
        
        # Validate package structure before building
        echo "üîç Validating package structure..."
        
        if [ ! -d "custom-package" ]; then
          echo "‚ùå Custom package directory not found!"
          exit 1
        fi
        
        if [ ! -d "custom-package/DEBIAN" ]; then
          echo "‚ùå DEBIAN directory not found!"
          exit 1
        fi
        
        if [ ! -f "custom-package/DEBIAN/control" ]; then
          echo "‚ùå Control file not found!"
          exit 1
        fi
        
        echo "‚úÖ Package structure validated"
        echo "üìä Total files: $(find custom-package -type f | wc -l)"
        echo "üì¶ Package size: $(du -sh custom-package | cut -f1)"
        
        # Build package with better error handling
        echo "üî® Building DEB package..."
        
        sudo chown -R root:root custom-package/
        
        if dpkg-deb --build custom-package onlyoffice-communityserver-custom.deb 2>&1; then
          echo "‚úÖ Package built successfully!"
          
          # Validate the final package
          if [ -f "onlyoffice-communityserver-custom.deb" ] && [ -s "onlyoffice-communityserver-custom.deb" ]; then
            echo "üì¶ Final package size: $(ls -lh onlyoffice-communityserver-custom.deb | awk '{print $5}')"
            
            # Quick package validation
            echo "üîç Validating package integrity..."
            if dpkg-deb --info onlyoffice-communityserver-custom.deb >/dev/null 2>&1; then
              echo "‚úÖ Package validation passed!"
            else
              echo "‚ö†Ô∏è Package validation warnings (may still be usable)"
            fi
          else
            echo "‚ùå Package file is missing or empty"
            exit 1
          fi
        else
          echo "‚ùå Package build failed!"
          echo "üìã DEBIAN directory final state:"
          ls -la custom-package/DEBIAN/
          exit 1
        fi
        
    - name: Upload custom package
      uses: actions/upload-artifact@v4
      with:
        name: onlyoffice-custom-${{ github.run_number }}
        path: onlyoffice-communityserver-custom.deb
        retention-days: 7  # Reduced retention

  # Optional Docker build
  build-docker:
    needs: create-custom-package
    runs-on: ubuntu-latest
    if: needs.create-custom-package.result == 'success' && github.event.inputs.skip_docker != 'true'
    
    steps:
    - name: Download custom package
      uses: actions/download-artifact@v4
      with:
        name: onlyoffice-custom-${{ github.run_number }}
        
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Fast Docker build
      run: |
        # Streamlined Dockerfile
        cat > Dockerfile << 'EOF'
        FROM ubuntu:20.04
        ENV DEBIAN_FRONTEND=noninteractive
        
        # Essential packages only
        RUN apt-get update && apt-get install -y --no-install-recommends \
            wget curl supervisor nginx && \
            rm -rf /var/lib/apt/lists/*
            
        # Install custom package
        COPY onlyoffice-communityserver-custom.deb /tmp/
        RUN dpkg -i /tmp/onlyoffice-communityserver-custom.deb || apt-get install -f -y && \
            rm /tmp/onlyoffice-communityserver-custom.deb
        
        LABEL version="${{ env.ONLYOFFICE_VERSION }}-custom-${{ github.run_number }}"
        EXPOSE 80 443
        CMD ["/usr/bin/supervisord", "-c", "/etc/supervisor/supervisord.conf"]
        EOF
        
        # Build with BuildKit for speed
        DOCKER_BUILDKIT=1 docker build --progress=plain -t onlyoffice-custom-mail:latest .
        
        # Compress and save
        docker save onlyoffice-custom-mail:latest | gzip -1 > onlyoffice-custom-mail-image.tar.gz
        
        echo "üì¶ Image size: $(ls -lh onlyoffice-custom-mail-image.tar.gz | awk '{print $5}')"
        
    - name: Upload Docker image
      uses: actions/upload-artifact@v4
      with:
        name: onlyoffice-docker-${{ github.run_number }}
        path: onlyoffice-custom-mail-image.tar.gz
        retention-days: 3
