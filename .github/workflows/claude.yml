name: Build Custom OnlyOffice with Mail Module Changes

on:
  workflow_dispatch:
    inputs:
      force_rebuild:
        description: 'Force rebuild even if cached'
        type: boolean
        default: false
      skip_docker:
        description: 'Skip Docker image build'
        type: boolean
        default: false

env:
  ONLYOFFICE_VERSION: "12.7.1"  # Latest available version as of June 2025
  FORCE_REBUILD: ${{ github.event.inputs.force_rebuild || 'false' }}
  SKIP_DOCKER: ${{ github.event.inputs.skip_docker || 'false' }}
  # Alternative versions to try if main version fails
  FALLBACK_VERSIONS: "12.7.0,12.6.0,12.5.2,12.1.0,12.0.1"

jobs:
  # Fast preparation job with aggressive caching
  prepare-environment:
    runs-on: ubuntu-latest
    outputs:
      cache-hit-deb: ${{ steps.cache-deb.outputs.cache-hit }}
      cache-hit-extracted: ${{ steps.cache-extracted.outputs.cache-hit }}
      skip-build: ${{ steps.check-changes.outputs.skip-build }}
      
    steps:
    - name: Checkout code (shallow)
      uses: actions/checkout@v4
      with:
        fetch-depth: 1  # Shallow clone for speed
        submodules: false  # Skip submodules initially
        
    - name: Check for relevant changes
      id: check-changes
      run: |
        # Only check mail module files for changes
        CHANGED_FILES=$(git diff --name-only HEAD~1 2>/dev/null || echo "all")
        
        if [[ "$CHANGED_FILES" == "all" ]] || echo "$CHANGED_FILES" | grep -E "(module/ASC\.Mail|\.github/workflows)" > /dev/null; then
          echo "skip-build=false" >> $GITHUB_OUTPUT
          echo "üìù Changes detected in mail module or workflow"
        else
          echo "skip-build=true" >> $GITHUB_OUTPUT  
          echo "‚ö° No mail module changes detected"
        fi
        
    - name: Multi-level cache for DEB package
      id: cache-deb
      uses: actions/cache@v4
      with:
        path: onlyoffice-communityserver.deb
        key: onlyoffice-deb-v2-${{ env.ONLYOFFICE_VERSION }}
        restore-keys: |
          onlyoffice-deb-v2-
          onlyoffice-deb-
        
    - name: Multi-level cache for extracted package  
      id: cache-extracted
      uses: actions/cache@v4
      with:
        path: official-package/
        key: onlyoffice-extracted-v2-${{ env.ONLYOFFICE_VERSION }}-${{ hashFiles('onlyoffice-communityserver.deb') }}
        restore-keys: |
          onlyoffice-extracted-v2-${{ env.ONLYOFFICE_VERSION }}-
          onlyoffice-extracted-v2-
          
    - name: Install dependencies (parallel)
      if: steps.cache-deb.outputs.cache-hit != 'true' || steps.cache-extracted.outputs.cache-hit != 'true'
      run: |
        # Install in parallel and only what's needed
        sudo apt-get update -qq &
        wait
        sudo apt-get install -y --no-install-recommends wget curl dpkg-dev &
        wait
        
    - name: Check available OnlyOffice versions
      if: steps.cache-deb.outputs.cache-hit != 'true'
      run: |
        echo "üîç Checking available OnlyOffice versions..."
        
        # Check GitHub releases
        echo "GitHub releases:"
        curl -s "https://api.github.com/repos/ONLYOFFICE/CommunityServer/releases" | \
          jq -r '.[].tag_name' | head -5 || echo "GitHub API check failed"
        
        # Check what's available in download directory
        echo "Checking download.onlyoffice.com..."
        curl -s -I "https://download.onlyoffice.com/install/community/" || echo "Download site check failed"
        
        echo "Proceeding with configured version: ${{ env.ONLYOFFICE_VERSION }}"
        
    - name: Smart download with multiple sources
      if: steps.cache-deb.outputs.cache-hit != 'true'
      run: |
        echo "‚¨áÔ∏è Downloading OnlyOffice package..."
        
    - name: Smart download with repository method
      if: steps.cache-deb.outputs.cache-hit != 'true'
      run: |
        echo "‚¨áÔ∏è Setting up OnlyOffice repository and downloading package..."
        
        # Add OnlyOffice APT repository
        echo "üîß Adding OnlyOffice repository..."
        wget -qO - https://download.onlyoffice.com/GPG-KEY-ONLYOFFICE | sudo apt-key add -
        echo "deb https://download.onlyoffice.com/repo/debian squeeze main" | sudo tee /etc/apt/sources.list.d/onlyoffice.list
        
        # Update package lists
        sudo apt-get update -qq
        
        # Try to download the package without installing dependencies
        echo "üì¶ Downloading OnlyOffice Community Server package..."
        
        download_success=false
        
        # Method 1: Download using apt-get download
        echo "üì¶ Downloading OnlyOffice Community Server package..."
        if apt-get download onlyoffice-communityserver 2>/dev/null; then
          deb_file=$(find . -name "onlyoffice-communityserver*.deb" -type f | head -1)
          if [ -n "$deb_file" ] && [ -s "$deb_file" ]; then
            # Rename to standard name if needed
            if [ "$deb_file" != "./onlyoffice-communityserver.deb" ]; then
              mv "$deb_file" onlyoffice-communityserver.deb
            fi
            echo "‚úÖ Downloaded via apt-get download"
            download_success=true
          fi
        fi
        
        # Method 2: Use the official installation script to get package info
        if [ "$download_success" = false ]; then
          echo "üîÑ Trying installation script method..."
          
          # Download the workspace installation script
          wget -q https://download.onlyoffice.com/install/workspace-install.sh -O /tmp/workspace-install.sh
          chmod +x /tmp/workspace-install.sh
          
          # Extract the package URL from the script (if possible)
          if grep -o 'https://[^"]*onlyoffice-communityserver[^"]*\.deb' /tmp/workspace-install.sh > /tmp/package_urls.txt; then
            while IFS= read -r url; do
              echo "üîÑ Trying direct download: $url"
              if wget --timeout=60 --tries=2 "$url" -O onlyoffice-communityserver.deb 2>/dev/null; then
                if [ -f "onlyoffice-communityserver.deb" ] && [ -s "onlyoffice-communityserver.deb" ]; then
                  file_size=$(stat -c%s onlyoffice-communityserver.deb)
                  if [ "$file_size" -gt 50000000 ]; then
                    echo "‚úÖ Downloaded via script URL: $url"
                    download_success=true
                    break
                  fi
                fi
              fi
            done < /tmp/package_urls.txt
          fi
        fi
        
        # Method 3: Try alternative repository URLs
        if [ "$download_success" = false ]; then
          echo "üîÑ Trying alternative repositories..."
          
          # Try the community repository
          echo "üîÑ Trying alternative repositories..."
          echo "deb https://download.onlyoffice.com/repo/debian/community stable main" | sudo tee /etc/apt/sources.list.d/onlyoffice-community.list
          sudo apt-get update -qq
          
          if apt-get download onlyoffice-communityserver 2>/dev/null; then
            deb_file=$(find . -name "onlyoffice-communityserver*.deb" -type f | head -1)
            if [ -n "$deb_file" ] && [ -s "$deb_file" ]; then
              if [ "$deb_file" != "./onlyoffice-communityserver.deb" ]; then
                mv "$deb_file" onlyoffice-communityserver.deb
              fi
              echo "‚úÖ Downloaded from community repository"
              download_success=true
            fi
          fi
        fi
        
        # Method 4: Try building from Docker (as fallback)
        if [ "$download_success" = false ]; then
          echo "üîÑ Trying Docker extraction method..."
          
          # Install Docker if needed
          if ! command -v docker >/dev/null 2>&1; then
            curl -fsSL https://get.docker.com -o get-docker.sh
            sudo sh get-docker.sh
          fi
          
          # Pull OnlyOffice Community Server Docker image and extract package
          if sudo docker pull onlyoffice/communityserver:latest; then
            # Create container and copy package files
            container_id=$(sudo docker create onlyoffice/communityserver:latest)
            
            # Try to find and extract the DEB package from the container
            if sudo docker cp "$container_id":/app/onlyoffice/ /tmp/onlyoffice_extracted 2>/dev/null; then
              # Look for DEB files or create a pseudo-package
              echo "üì¶ Creating package from Docker container..."
              mkdir -p /tmp/docker_package/DEBIAN
              
              # Copy the application files
              sudo cp -r /tmp/onlyoffice_extracted /tmp/docker_package/opt/onlyoffice/
              
              # Create a basic control file
              cat > /tmp/docker_package/DEBIAN/control << EOF
        Package: onlyoffice-communityserver-custom
        Version: docker-extracted-$(date +%Y%m%d)
        Architecture: all
        Maintainer: Custom Build
        Description: OnlyOffice Community Server extracted from Docker
        EOF
              
              # Create the package
              sudo chown -R root:root /tmp/docker_package/
              if dpkg-deb --build /tmp/docker_package onlyoffice-communityserver.deb; then
                echo "‚úÖ Created package from Docker container"
                download_success=true
              fi
            fi
            
            sudo docker rm "$container_id" 2>/dev/null || true
          fi
        fi
        
        if [ "$download_success" = false ]; then
          echo "‚ùå All download methods failed!"
          echo "üí° OnlyOffice Community Server may need to be installed via the official script"
          echo "üí° Consider using the Docker installation method instead"
          exit 1
        fi
        
        # Final validation and info
        echo "üì¶ Final package info:"
        ls -lh onlyoffice-communityserver.deb
        dpkg-deb --info onlyoffice-communityserver.deb | head -10
        
        # If direct downloads fail, try using the custom build script if available
        if [ "$download_success" = false ] && [ -f ".github/build-scripts/download-deb.sh" ]; then
          echo "üîÑ Trying custom download script..."
          chmod +x .github/build-scripts/download-deb.sh
          if sudo ./.github/build-scripts/download-deb.sh; then
            if [ -f "onlyoffice-communityserver.deb" ] && [ -s "onlyoffice-communityserver.deb" ]; then
              echo "‚úÖ Custom script download successful!"
              download_success=true
            fi
          fi
        fi
        
        # Final fallback - try APT repository method
        if [ "$download_success" = false ]; then
          echo "üîÑ Trying APT repository method..."
          
          # Add OnlyOffice repository
          wget -qO - https://download.onlyoffice.com/repo/4.0/debian/onlyoffice.key | sudo apt-key add -
          echo "deb https://download.onlyoffice.com/repo/4.0/debian stable main" | sudo tee /etc/apt/sources.list.d/onlyoffice.list
          
          sudo apt-get update -qq
          
          # Download package without installing
          if apt-get download onlyoffice-communityserver 2>/dev/null; then
            # Find the downloaded package
            deb_file=$(find . -name "onlyoffice-communityserver*.deb" -type f | head -1)
            if [ -n "$deb_file" ] && [ -s "$deb_file" ]; then
              mv "$deb_file" onlyoffice-communityserver.deb
              echo "‚úÖ APT download successful!"
              download_success=true
            fi
          fi
        fi
        
        if [ "$download_success" = false ]; then
          echo "‚ùå All download methods failed!"
          echo "üí° Please check if OnlyOffice ${{ env.ONLYOFFICE_VERSION }} is available"
          echo "üí° You may need to update ONLYOFFICE_VERSION or provide a custom download script"
          exit 1
        fi
        
        # Final validation and info
        echo "üì¶ Final package info:"
        ls -lh onlyoffice-communityserver.deb
        dpkg-deb --info onlyoffice-communityserver.deb | head -10
        
    - name: Fast extraction (only if needed)
      if: steps.cache-extracted.outputs.cache-hit != 'true'
      run: |
        echo "üì¶ Extracting package..."
        
        # Parallel extraction
        mkdir -p official-package
        dpkg-deb -x onlyoffice-communityserver.deb official-package/ &
        dpkg-deb -e onlyoffice-communityserver.deb official-package/DEBIAN/ &
        wait
        
        # Quick validation
        extracted_files=$(find official-package -type f | wc -l)
        if [ "$extracted_files" -gt 100 ]; then
          echo "‚úÖ Extracted $extracted_files files"
        else
          echo "‚ùå Extraction appears incomplete"
          exit 1
        fi


  build-mail-module:
    needs: prepare-environment
    runs-on: windows-latest
    if: (needs.prepare-environment.outputs.skip-build != 'true' || github.event.inputs.force_rebuild == 'true') && needs.prepare-environment.result == 'success'
    
    outputs:
      build-success: ${{ steps.verify-build.outputs.success }}
      
    steps:
    - name: Checkout with submodules
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history needed for proper builds
        submodules: recursive
        
    - name: Setup .NET Framework (multiple versions)
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: |
          6.0.x
          8.0.x
        
    - name: Setup MSBuild (latest)
      uses: microsoft/setup-msbuild@v2
      with:
        msbuild-architecture: x64
        
    - name: Setup NuGet (latest)
      uses: nuget/setup-nuget@v2
      with:
        nuget-version: 'latest'
        
    - name: Install Visual Studio Build Tools
      run: |
        # Install additional build components that OnlyOffice might need
        choco install visualstudio2022buildtools --package-parameters "--add Microsoft.VisualStudio.Workload.MSBuildTools --add Microsoft.VisualStudio.Workload.WebBuildTools --quiet"
        
    - name: Diagnose solution structure
      shell: pwsh
      run: |
        Write-Host "üîç Analyzing solution structure..."
        
        # Find all solution files
        $solutions = Get-ChildItem -Name "*.sln" -Recurse
        Write-Host "Found solutions:"
        $solutions | ForEach-Object { Write-Host "  üìÑ $_" }
        
        # Find mail-related projects
        $mailProjects = Get-ChildItem -Name "*Mail*.csproj" -Recurse
        Write-Host "`nMail-related projects:"
        $mailProjects | ForEach-Object { 
          Write-Host "  üìÑ $_"
          # Check if project file is valid
          try {
            $content = Get-Content $_ -Raw
            if ($content.Contains('<Project')) {
              Write-Host "    ‚úÖ Valid project file"
            } else {
              Write-Host "    ‚ùå Invalid project file"
            }
          } catch {
            Write-Host "    ‚ùå Cannot read project file"
          }
        }
        
        # Look for the main mail module
        $mainMailProject = "module/ASC.Mail/ASC.Mail/ASC.Mail.csproj"
        if (Test-Path $mainMailProject) {
          Write-Host "`nüìã Main mail project found: $mainMailProject"
          $content = Get-Content $mainMailProject -Raw
          Write-Host "Target framework:"
          if ($content -match '<TargetFramework[^>]*>([^<]+)</TargetFramework>') {
            Write-Host "  üéØ $($matches[1])"
          }
        } else {
          Write-Host "`n‚ùå Main mail project not found at expected location"
        }
        
    - name: Global NuGet restore
      shell: pwsh
      run: |
        Write-Host "üì¶ Comprehensive NuGet restore..."
        
        # Restore all solutions
        $solutions = Get-ChildItem -Name "*.sln" -Recurse
        foreach ($solution in $solutions) {
          Write-Host "Restoring: $solution"
          nuget restore $solution -Verbosity detailed -NonInteractive
          if ($LASTEXITCODE -ne 0) {
            Write-Host "‚ö†Ô∏è NuGet restore failed for $solution"
          }
        }
        
        # Also try dotnet restore for newer project formats
        Write-Host "`nTrying dotnet restore..."
        try {
          dotnet restore --verbosity diagnostic
        } catch {
          Write-Host "dotnet restore failed: $($_.Exception.Message)"
        }
        
    - name: Build entire solution first
      shell: pwsh
      run: |
        Write-Host "üèóÔ∏è Building entire solution to resolve dependencies..."
        
        # Find the main solution file
        $mainSolution = Get-ChildItem -Name "*.sln" | Where-Object { 
          $_ -like "*OnlyOffice*" -or $_ -like "*CommunityServer*" 
        } | Select-Object -First 1
        
        if (-not $mainSolution) {
          $mainSolution = Get-ChildItem -Name "*.sln" | Select-Object -First 1
        }
        
        if ($mainSolution) {
          Write-Host "Building solution: $mainSolution"
          
          # Try different build configurations
          $configs = @("Release", "Debug")
          $platforms = @("Any CPU", "AnyCPU", "x64")
          
          $buildSuccess = $false
          foreach ($config in $configs) {
            foreach ($platform in $platforms) {
              Write-Host "Trying Configuration=$config, Platform=$platform"
              
              try {
                msbuild $mainSolution /p:Configuration=$config /p:Platform="$platform" /verbosity:normal /maxcpucount /p:WarningLevel=0
                if ($LASTEXITCODE -eq 0) {
                  Write-Host "‚úÖ Build successful with $config|$platform"
                  $buildSuccess = $true
                  break
                }
              } catch {
                Write-Host "‚ùå Build failed with $config|$platform"
              }
            }
            if ($buildSuccess) { break }
          }
          
          if (-not $buildSuccess) {
            Write-Host "‚ö†Ô∏è Full solution build failed, trying individual projects..."
          }
        } else {
          Write-Host "‚ùå No solution file found"
        }
        
    - name: Build mail module specifically
      shell: pwsh
      run: |
        Write-Host "üéØ Building mail module specifically..."
        
        # Try to build mail projects individually
        $mailProjects = @(
          "module/ASC.Mail/ASC.Mail/ASC.Mail.csproj",
          "module/ASC.Mail/ASC.Mail.sln"
        )
        
        $buildSuccess = $false
        foreach ($project in $mailProjects) {
          if (Test-Path $project) {
            Write-Host "Building: $project"
            
            # Clean first
            msbuild $project /t:Clean /p:Configuration=Release /p:Platform=AnyCPU
            
            # Then build
            msbuild $project /t:Build /p:Configuration=Release /p:Platform=AnyCPU /verbosity:diagnostic /maxcpucount
            
            if ($LASTEXITCODE -eq 0) {
              Write-Host "‚úÖ Successfully built $project"
              $buildSuccess = $true
            } else {
              Write-Host "‚ùå Failed to build $project"
              
              # Try debug build as fallback
              Write-Host "Trying Debug configuration..."
              msbuild $project /t:Build /p:Configuration=Debug /p:Platform=AnyCPU /verbosity:diagnostic
              if ($LASTEXITCODE -eq 0) {
                Write-Host "‚úÖ Debug build successful for $project"
                $buildSuccess = $true
              }
            }
          }
        }
        
        # If specific projects fail, try building dependencies first
        if (-not $buildSuccess) {
          Write-Host "üîÑ Building dependencies first..."
          
          $dependencies = @(
            "common/ASC.Common/ASC.Common.csproj",
            "common/ASC.Core.Common/ASC.Core.Common.csproj",
            "web/core/ASC.Web.Core/ASC.Web.Core.csproj"
          )
          
          foreach ($dep in $dependencies) {
            if (Test-Path $dep) {
              Write-Host "Building dependency: $dep"
              msbuild $dep /p:Configuration=Release /p:Platform=AnyCPU /verbosity:minimal
            }
          }
          
          # Try mail module again
          $mailProject = "module/ASC.Mail/ASC.Mail/ASC.Mail.csproj"
          if (Test-Path $mailProject) {
            msbuild $mailProject /p:Configuration=Release /p:Platform=AnyCPU /verbosity:diagnostic
          }
        }
        
    - name: Comprehensive build verification
      id: verify-build
      shell: pwsh
      run: |
        Write-Host "üîç Comprehensive search for ASC.Mail assemblies..."
        $success = $false
        $foundDlls = @()
        
        # Search everywhere for ASC.Mail.dll
        try {
          $allDlls = Get-ChildItem -Path "." -Name "ASC.Mail.dll" -Recurse -ErrorAction SilentlyContinue
          
          foreach ($dll in $allDlls) {
            $size = $dll.Length
            $path = $dll.FullName.Replace((Get-Location).Path, "").TrimStart('\', '/')
            
            Write-Host "Found: $path ($size bytes)"
            
            # Check if it's a valid assembly (more than 49 bytes and has PE header)
            if ($size -gt 10000) {  # Reasonable minimum for a compiled assembly
              try {
                # Try to load assembly metadata to verify it's valid
                $assembly = [System.Reflection.Assembly]::ReflectionOnlyLoadFrom($dll.FullName)
                Write-Host "‚úÖ Valid assembly: $path"
                $foundDlls += $path
                $success = $true
              } catch {
                Write-Host "‚ö†Ô∏è Invalid assembly: $path"
              }
            } elseif ($size -le 100) {
              Write-Host "‚ùå File too small (likely empty/stub): $path"
            }
          }
        } catch {
          Write-Host "Error during search: $($_.Exception.Message)"
        }
        
        # Also search for any other mail-related assemblies
        $otherMailDlls = Get-ChildItem -Path "." -Name "*Mail*.dll" -Recurse -ErrorAction SilentlyContinue | 
          Where-Object { $_.Length -gt 10000 }
        
        if ($otherMailDlls) {
          Write-Host "`nOther mail-related assemblies:"
          foreach ($dll in $otherMailDlls) {
            $path = $dll.FullName.Replace((Get-Location).Path, "").TrimStart('\', '/')
            Write-Host "  üìÑ $path ($($dll.Length) bytes)"
          }
        }
        
        # Debug: Show what was actually built
        Write-Host "`nAll DLL files in bin directories:"
        $binDlls = Get-ChildItem -Path "." -Name "*.dll" -Recurse -ErrorAction SilentlyContinue | 
          Where-Object { $_.DirectoryName -like "*bin*" } | 
          Sort-Object Length -Descending | 
          Select-Object -First 20
          
        foreach ($dll in $binDlls) {
          $path = $dll.FullName.Replace((Get-Location).Path, "").TrimStart('\', '/')
          Write-Host "  üìÑ $path ($($dll.Length) bytes)"
        }
        
        if ($success -and $foundDlls.Count -gt 0) {
          # Use the largest valid DLL
          $mainDll = $foundDlls[0]
          Write-Host "`n‚úÖ Build verification successful!"
          Write-Host "Primary DLL: $mainDll"
          
          echo "success=true" >> $env:GITHUB_OUTPUT
          echo "main_dll_path=$mainDll" >> $env:GITHUB_OUTPUT
          echo "main_dll_dir=$(Split-Path $mainDll -Parent)" >> $env:GITHUB_OUTPUT
        } else {
          Write-Host "`n‚ùå No valid ASC.Mail.dll assemblies found"
          echo "success=false" >> $env:GITHUB_OUTPUT
        }
        
    - name: Upload all build outputs for debugging
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: build-debug-${{ github.run_number }}
        path: |
          **/bin/**/*Mail*
          **/*Mail*.dll
          **/*Mail*.pdb
        retention-days: 1

  # Streamlined package creation
  create-custom-package:
    needs: [prepare-environment, build-mail-module]
    runs-on: ubuntu-latest
    if: always() && (needs.prepare-environment.result == 'success' || needs.prepare-environment.result == 'skipped')
    
    steps:
    - name: Checkout code (for fallback)
      uses: actions/checkout@v4
      with:
        fetch-depth: 1
        
    - name: Check job dependencies
      run: |
        echo "=== JOB DEPENDENCY STATUS ==="
        echo "prepare-environment result: ${{ needs.prepare-environment.result }}"
        echo "build-mail-module result: ${{ needs.build-mail-module.result }}"
        echo "prepare-environment outputs:"
        echo "  cache-hit-deb: ${{ needs.prepare-environment.outputs.cache-hit-deb }}"
        echo "  cache-hit-extracted: ${{ needs.prepare-environment.outputs.cache-hit-extracted }}"
        echo "  skip-build: ${{ needs.prepare-environment.outputs.skip-build }}"
        
    - name: Try to restore cached package
      id: restore-cache
      uses: actions/cache/restore@v4
      with:
        path: |
          onlyoffice-communityserver.deb
          official-package/
        key: onlyoffice-extracted-v2-${{ env.ONLYOFFICE_VERSION }}-${{ hashFiles('onlyoffice-communityserver.deb') }}
        restore-keys: |
          onlyoffice-extracted-v2-${{ env.ONLYOFFICE_VERSION }}-
          onlyoffice-extracted-v2-
          
    - name: Download artifacts from preparation job (fallback)
      if: steps.restore-cache.outputs.cache-hit != 'true'
      uses: actions/download-artifact@v4
      continue-on-error: true
      with:
        name: extracted-onlyoffice-package
        
    - name: Verify package availability
      run: |
        echo "üîç Checking package availability..."
        
        if [ -d "official-package" ] && [ -f "onlyoffice-communityserver.deb" ]; then
          echo "‚úÖ Package available from cache/artifacts"
          echo "üì¶ DEB size: $(ls -lh onlyoffice-communityserver.deb | awk '{print $5}')"
          echo "üìÅ Extracted files: $(find official-package -type f | wc -l)"
        else
          echo "‚ùå Package not available, need to download and extract"
          
          # Emergency download if nothing is available
          echo "üö® Emergency package download..."
          
          # Install dependencies
          sudo apt-get update -qq
          sudo apt-get install -y --no-install-recommends wget dpkg-dev apt-transport-https ca-certificates
          
          # Add OnlyOffice APT repository
          echo "üîß Adding OnlyOffice repository..."
          wget -qO - https://download.onlyoffice.com/GPG-KEY-ONLYOFFICE | sudo apt-key add -
          echo "deb https://download.onlyoffice.com/repo/debian squeeze main" | sudo tee /etc/apt/sources.list.d/onlyoffice.list
          
          # Update package lists
          sudo apt-get update -qq
          
          download_success=false
          
          # Try to download the package using apt-get download
          echo "üì¶ Downloading OnlyOffice Community Server..."
          
          # Download to current directory instead of /tmp
          if apt-get download onlyoffice-communityserver 2>/dev/null; then
            deb_file=$(find . -name "onlyoffice-communityserver*.deb" -type f | head -1)
            if [ -n "$deb_file" ] && [ -s "$deb_file" ]; then
              # Rename to standard name if needed
              if [ "$deb_file" != "./onlyoffice-communityserver.deb" ]; then
                mv "$deb_file" onlyoffice-communityserver.deb
              fi
              echo "‚úÖ Emergency download successful!"
              download_success=true
            fi
          fi
          
          # Fallback: Try alternative repository
          if [ "$download_success" = false ]; then
            echo "üîÑ Trying alternative repository..."
            echo "deb https://download.onlyoffice.com/repo/debian/community stable main" | sudo tee /etc/apt/sources.list.d/onlyoffice-community.list
            sudo apt-get update -qq
            
            if apt-get download onlyoffice-communityserver 2>/dev/null; then
              deb_file=$(find . -name "onlyoffice-communityserver*.deb" -type f | head -1)
              if [ -n "$deb_file" ] && [ -s "$deb_file" ]; then
                if [ "$deb_file" != "./onlyoffice-communityserver.deb" ]; then
                  mv "$deb_file" onlyoffice-communityserver.deb
                fi
                echo "‚úÖ Alternative repository download successful!"
                download_success=true
              fi
            fi
          fi
          
          if [ "$download_success" = false ]; then
            echo "‚ùå Emergency download failed"
            exit 1
          fi
          
          # Extract the package
          echo "üì¶ Emergency extraction..."
          mkdir -p official-package
          dpkg-deb -x onlyoffice-communityserver.deb official-package/
          dpkg-deb -e onlyoffice-communityserver.deb official-package/DEBIAN/
          
          echo "‚úÖ Emergency package preparation complete"
        fi
        
    - name: Download build artifacts (conditional)
      if: needs.build-mail-module.outputs.build-success == 'true'
      uses: actions/download-artifact@v4
      continue-on-error: true
      with:
        name: mail-module-build
        path: build-output/
        
    - name: Fast package creation
      run: |
        echo "üöÄ Fast package creation..."
        
        # Verify we have the source package
        if [ ! -d "official-package" ]; then
          echo "‚ùå official-package directory still not found!"
          echo "Available directories:"
          ls -la
          exit 1
        fi
        
        # Quick copy
        echo "üìã Copying package structure..."
        cp -r official-package custom-package
        
        echo "‚úÖ Package structure copied"
        echo "üìä Files in custom package: $(find custom-package -type f | wc -l)"
        
        # Replace mail module if we have a new one  
        if [ -d "build-output/" ]; then
          echo "üìã Searching for built mail assemblies..."
          
          # Find any ASC.Mail.dll files in the build output
          mail_dlls=$(find build-output -name "ASC.Mail.dll" -type f 2>/dev/null || true)
          
          if [ -n "$mail_dlls" ]; then
            echo "‚úÖ Found compiled mail assemblies:"
            echo "$mail_dlls"
            
            # Get the largest DLL file (most likely the main one)
            main_dll=$(echo "$mail_dlls" | xargs ls -la | sort -k5 -nr | head -1 | awk '{print $NF}')
            echo "üìã Using primary DLL: $main_dll"
            
            # Find all ASC.Mail.dll locations in the package and replace them
            package_dlls=$(find custom-package -name "ASC.Mail.dll" -type f 2>/dev/null || true)
            
            if [ -n "$package_dlls" ]; then
              echo "üîÑ Replacing mail assemblies in package:"
              while IFS= read -r dll_path; do
                if [ -f "$dll_path" ]; then
                  cp "$main_dll" "$dll_path"
                  echo "  ‚úÖ Updated: $dll_path"
                fi
              done <<< "$package_dlls"
              
              # Also copy any related files (PDB, XML, etc.)
              main_dll_dir=$(dirname "$main_dll")
              for ext in pdb xml exe.config; do
                if [ -f "${main_dll_dir}/ASC.Mail.$ext" ]; then
                  while IFS= read -r dll_path; do
                    base_path="${dll_path%.dll}.$ext"
                    base_dir=$(dirname "$dll_path")
                    if [ -f "$base_path" ] || [ -d "$base_dir" ]; then
                      cp "${main_dll_dir}/ASC.Mail.$ext" "$base_dir/" 2>/dev/null || true
                      echo "  ‚úÖ Updated: ASC.Mail.$ext in $base_dir"
                    fi
                  done <<< "$package_dlls"
                fi
              done
              
            else
              echo "‚ö†Ô∏è No ASC.Mail.dll files found in package to replace"
              # Create a new directory for the compiled assemblies
              mkdir -p custom-package/opt/onlyoffice/CommunityServer/bin/
              echo "$mail_dlls" | while read -r dll; do
                if [ -f "$dll" ]; then
                  cp "$dll" custom-package/opt/onlyoffice/CommunityServer/bin/
                  echo "  ‚úÖ Added: $(basename "$dll") to package"
                fi
              done
            fi
            
          else
            echo "‚ÑπÔ∏è No ASC.Mail.dll found in build output, using original mail module"
            echo "Available files in build-output:"
            find build-output -name "*.dll" -type f | head -10 || echo "No DLL files found"
          fi
        else
          echo "‚ÑπÔ∏è No build output available, using original mail module"
        fi
        
        # Comprehensive permission fix
        if [ -d "custom-package/DEBIAN" ]; then
          echo "üîß Fixing DEBIAN script permissions..."
          
          # Make all maintainer scripts executable (must be >=0555 and <=0775)
          for script in preinst postinst prerm postrm config templates; do
            if [ -f "custom-package/DEBIAN/$script" ]; then
              chmod 755 "custom-package/DEBIAN/$script"
              echo "‚úÖ Fixed $script: $(ls -la custom-package/DEBIAN/$script | awk '{print $1}')"
            fi
          done
          
          # Control and conffiles should be readable only
          chmod 644 custom-package/DEBIAN/control 2>/dev/null || true
          chmod 644 custom-package/DEBIAN/conffiles 2>/dev/null || true
          chmod 644 custom-package/DEBIAN/md5sums 2>/dev/null || true
          
          echo "üìã Final DEBIAN permissions:"
          ls -la custom-package/DEBIAN/ | head -5
        fi
        
        # Quick metadata update
        if [ -f "custom-package/DEBIAN/control" ]; then
          sed -i "s/Package: onlyoffice-communityserver/Package: onlyoffice-communityserver-custom/" custom-package/DEBIAN/control
          sed -i "s/Version: \(.*\)/Version: \1-custom-${{ github.run_number }}/" custom-package/DEBIAN/control
        fi
        
        # Validate package structure before building
        echo "üîç Validating package structure..."
        
        if [ ! -d "custom-package" ]; then
          echo "‚ùå Custom package directory not found!"
          exit 1
        fi
        
        if [ ! -d "custom-package/DEBIAN" ]; then
          echo "‚ùå DEBIAN directory not found!"
          exit 1
        fi
        
        if [ ! -f "custom-package/DEBIAN/control" ]; then
          echo "‚ùå Control file not found!"
          exit 1
        fi
        
        echo "‚úÖ Package structure validated"
        echo "üìä Total files: $(find custom-package -type f | wc -l)"
        echo "üì¶ Package size: $(du -sh custom-package | cut -f1)"
        
        # Build package with better error handling
        echo "üî® Building DEB package..."
        
        sudo chown -R root:root custom-package/
        
        if dpkg-deb --build custom-package onlyoffice-communityserver-custom.deb 2>&1; then
          echo "‚úÖ Package built successfully!"
          
          # Validate the final package
          if [ -f "onlyoffice-communityserver-custom.deb" ] && [ -s "onlyoffice-communityserver-custom.deb" ]; then
            echo "üì¶ Final package size: $(ls -lh onlyoffice-communityserver-custom.deb | awk '{print $5}')"
            
            # Quick package validation
            echo "üîç Validating package integrity..."
            if dpkg-deb --info onlyoffice-communityserver-custom.deb >/dev/null 2>&1; then
              echo "‚úÖ Package validation passed!"
            else
              echo "‚ö†Ô∏è Package validation warnings (may still be usable)"
            fi
          else
            echo "‚ùå Package file is missing or empty"
            exit 1
          fi
        else
          echo "‚ùå Package build failed!"
          echo "üìã DEBIAN directory final state:"
          ls -la custom-package/DEBIAN/
          exit 1
        fi
        
    - name: Upload custom package
      uses: actions/upload-artifact@v4
      with:
        name: onlyoffice-custom-${{ github.run_number }}
        path: onlyoffice-communityserver-custom.deb
        retention-days: 7  # Reduced retention

  # Optional Docker build
  build-docker:
    needs: create-custom-package
    runs-on: ubuntu-latest
    if: needs.create-custom-package.result == 'success' && github.event.inputs.skip_docker != 'true'
    
    steps:
    - name: Download custom package
      uses: actions/download-artifact@v4
      with:
        name: onlyoffice-custom-${{ github.run_number }}
        
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Fast Docker build
      run: |
        # Streamlined Dockerfile
        cat > Dockerfile << 'EOF'
        FROM ubuntu:20.04
        ENV DEBIAN_FRONTEND=noninteractive
        
        # Essential packages only
        RUN apt-get update && apt-get install -y --no-install-recommends \
            wget curl supervisor nginx && \
            rm -rf /var/lib/apt/lists/*
            
        # Install custom package
        COPY onlyoffice-communityserver-custom.deb /tmp/
        RUN dpkg -i /tmp/onlyoffice-communityserver-custom.deb || apt-get install -f -y && \
            rm /tmp/onlyoffice-communityserver-custom.deb
        
        LABEL version="${{ env.ONLYOFFICE_VERSION }}-custom-${{ github.run_number }}"
        EXPOSE 80 443
        CMD ["/usr/bin/supervisord", "-c", "/etc/supervisor/supervisord.conf"]
        EOF
        
        # Build with BuildKit for speed
        DOCKER_BUILDKIT=1 docker build --progress=plain -t onlyoffice-custom-mail:latest .
        
        # Compress and save
        docker save onlyoffice-custom-mail:latest | gzip -1 > onlyoffice-custom-mail-image.tar.gz
        
        echo "üì¶ Image size: $(ls -lh onlyoffice-custom-mail-image.tar.gz | awk '{print $5}')"
        
    - name: Upload Docker image
      uses: actions/upload-artifact@v4
      with:
        name: onlyoffice-docker-${{ github.run_number }}
        path: onlyoffice-custom-mail-image.tar.gz
        retention-days: 3
