name: Build Custom OnlyOffice with Mail Module Changes

on:

  workflow_dispatch:

env:
  ONLYOFFICE_VERSION: "12.0.0"

jobs:
  download-and-prepare:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Cache APT packages
      uses: actions/cache@v4
      with:
        path: /var/cache/apt
        key: ${{ runner.os }}-apt-${{ hashFiles('**/apt-packages.txt') }}
        restore-keys: |
          ${{ runner.os }}-apt-
    
    - name: Install dependencies
      run: |
        echo "Installing required tools..."
        
        # Check what's already available
        echo "Pre-installed tools:"
        which wget curl jq file || echo "Some tools missing"
        
        # Update and install missing tools
        sudo apt-get update -qq
        sudo apt-get install -y wget curl jq file dpkg-dev
        
        echo "‚úÖ All dependencies ready"
        echo "Tool versions:"
        wget --version | head -1
        curl --version | head -1  
        jq --version
        file --version | head -1
        
    - name: Download official OnlyOffice package
      run: |
        echo "Using custom download script on Linux..."
        
        # Make the script executable and run it (should work perfectly on Linux)
        if [ -f ".github/build-scripts/download-deb.sh" ]; then
          chmod +x .github/build-scripts/download-deb.sh
          sudo ./.github/build-scripts/download-deb.sh
          
          # Verify the script worked
          if [ -f "onlyoffice-communityserver.deb" ] && [ -s "onlyoffice-communityserver.deb" ]; then
            echo "‚úÖ Successfully downloaded OnlyOffice package"
            dpkg-deb --info onlyoffice-communityserver.deb
            echo "üì¶ Package size: $(ls -lh onlyoffice-communityserver.deb | awk '{print $5}')"
          else
            echo "‚ùå Download failed"
            exit 1
          fi
        else
          echo "‚ùå Custom download script not found"
          exit 1
        fi
        
    - name: Extract official package
      run: |
        echo "Extracting official package..."
        dpkg-deb -x onlyoffice-communityserver.deb ./official-package/
        dpkg-deb -e onlyoffice-communityserver.deb ./official-package/DEBIAN/
        
        echo "Looking for existing mail module assemblies..."
        find ./official-package -name "ASC.Mail*" -type f || echo "No ASC.Mail files found"
        find ./official-package -name "ASC.Core*" -type f | head -5 || echo "No ASC.Core files found"
        
    - name: Upload extracted package
      uses: actions/upload-artifact@v4
      with:
        name: extracted-onlyoffice-package
        path: |
          onlyoffice-communityserver.deb
          official-package/
        retention-days: 1

  build-mail-module:
    needs: download-and-prepare
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
        
    - name: Setup .NET Framework and .NET SDK
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: |
          6.0.x
          5.0.x
          
    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v2
      
    - name: Setup NuGet
      uses: nuget/setup-nuget@v2
      
    - name: Download extracted package
      uses: actions/download-artifact@v4
      with:
        name: extracted-onlyoffice-package
        
    - name: Fix project configurations before build
      shell: pwsh
      run: |
        Write-Host "Fixing MSBuild project configurations..."
        
        # Find all .csproj files that might have configuration issues
        $problematic_projects = Get-ChildItem -Path "." -Name "*.csproj" -Recurse | Where-Object { 
          $_ -like "*Mail.Server*" -or $_ -like "*ASC.Mail.Server*" 
        }
        
        foreach ($proj in $problematic_projects) {
          Write-Host "Checking project: $proj"
          
          if (Test-Path $proj) {
            $content = Get-Content $proj -Raw
            
            # Check if the project has proper PropertyGroup for Release|Any CPU
            if ($content -notmatch '<PropertyGroup[^>]*Condition[^>]*Release.*Any CPU') {
              Write-Host "Adding missing Release|Any CPU configuration to $proj"
              
              # Add the missing configuration
              $newConfig = @"
  <PropertyGroup Condition=" `'`$(Configuration)|`$(Platform)`' == `'Release|Any CPU`' ">
    <DebugType>pdbonly</DebugType>
    <Optimize>true</Optimize>
    <OutputPath>bin\Release\</OutputPath>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
"@
              
              # Insert before the closing </Project> tag
              $content = $content -replace '</Project>', ($newConfig + "`r`n</Project>")
              Set-Content -Path $proj -Value $content
              Write-Host "‚úÖ Fixed configuration for $proj"
            }
          }
        }
        
    - name: Restore NuGet packages for mail module
      shell: pwsh
      run: |
        Write-Host "Restoring NuGet packages for mail module..."
        Set-Location "module/ASC.Mail/ASC.Mail"
        
        # Restore packages
        if (Test-Path "packages.config") {
          nuget restore packages.config -PackagesDirectory ../../../packages -Verbosity quiet
        }
        
        # Also restore at solution level if there's a solution file
        Set-Location "../../.."
        
        $sln_files = Get-ChildItem -Name "*.sln" -Recurse | Select-Object -First 1
        if ($sln_files) {
          Write-Host "Found solution file: $sln_files"
          nuget restore $sln_files -Verbosity quiet
        }
        
    - name: Build ASC.Mail module specifically
      shell: pwsh
      run: |
        Write-Host "Building ASC.Mail module with your custom changes..."
        
        Set-Location "module/ASC.Mail/ASC.Mail"
        
        # Build with MSBuild (native Windows support for .NET Framework)
        Write-Host "Building with MSBuild..."
        msbuild ASC.Mail.csproj `
          /p:Configuration=Release `
          /p:Platform="Any CPU" `
          /verbosity:minimal
        
        # Check if build succeeded
        if (Test-Path "bin/Release/ASC.Mail.dll") {
          Write-Host "‚úÖ Successfully built ASC.Mail.dll with MSBuild"
          Get-ChildItem bin/Release/ | Select-Object Name, Length
        } else {
          Write-Host "‚ùå Build failed - checking for errors..."
          Get-ChildItem bin/ -Recurse -ErrorAction SilentlyContinue
          
          # Try building with more verbose output to see errors
          Write-Host "Trying build with detailed output..."
          msbuild ASC.Mail.csproj `
            /p:Configuration=Release `
            /p:Platform="Any CPU" `
            /verbosity:detailed
        }
        
        Set-Location "../../.."
        
    - name: Upload built mail module
      uses: actions/upload-artifact@v4
      with:
        name: built-mail-module
        path: |
          module/ASC.Mail/ASC.Mail/bin/Release/
          module/ASC.Mail/ASC.Mail/obj/
        retention-days: 1

  create-custom-package:
    needs: [download-and-prepare, build-mail-module]
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
        
    - name: Download extracted package
      uses: actions/download-artifact@v4
      with:
        name: extracted-onlyoffice-package
        
    - name: Download built mail module
      uses: actions/download-artifact@v4
      with:
        name: built-mail-module
        path: module/ASC.Mail/ASC.Mail/
        
    - name: Create custom package with your changes
      run: |
        echo "Creating custom package with your mail module changes..."
        
        # Start with the extracted official package
        mkdir -p custom-package
        cp -r official-package/* custom-package/
        
        # Method 1: Replace compiled DLL if we have it
        if [ -f "module/ASC.Mail/ASC.Mail/bin/Release/ASC.Mail.dll" ]; then
          echo "Replacing ASC.Mail.dll with custom build..."
          
          # Find where ASC.Mail.dll is located in the official package
          mail_dll_location=$(find ./custom-package -name "ASC.Mail.dll" -type f | head -1)
          
          if [ -n "$mail_dll_location" ]; then
            echo "Found existing ASC.Mail.dll at: $mail_dll_location"
            cp module/ASC.Mail/ASC.Mail/bin/Release/ASC.Mail.dll "$mail_dll_location"
            echo "‚úÖ Replaced ASC.Mail.dll with custom version"
            
            # Also copy any related assemblies
            cp module/ASC.Mail/ASC.Mail/bin/Release/*.dll ./custom-package/$(dirname "$mail_dll_location")/ 2>/dev/null || echo "No additional DLLs to copy"
          else
            echo "‚ö†Ô∏è Could not find existing ASC.Mail.dll location, copying to standard location"
            mkdir -p ./custom-package/opt/onlyoffice/CommunityServer/
            cp module/ASC.Mail/ASC.Mail/bin/Release/*.dll ./custom-package/opt/onlyoffice/CommunityServer/ 2>/dev/null || echo "No DLLs found to copy"
          fi
        else
          echo "‚ö†Ô∏è No compiled ASC.Mail.dll found from Windows build"
        fi
        
        # Method 2: Always include source files for reference
        echo "Copying modified source files..."
        mkdir -p ./custom-package/opt/onlyoffice/CommunityServer/custom-sources/ASC.Mail/
        
        # Copy your modified files
        cp module/ASC.Mail/ASC.Mail/Utils/MailAddressHelper.cs ./custom-package/opt/onlyoffice/CommunityServer/custom-sources/ASC.Mail/ 2>/dev/null || echo "Could not copy MailAddressHelper.cs"
        cp module/ASC.Mail/ASC.Mail/Core/DaoFactory.cs ./custom-package/opt/onlyoffice/CommunityServer/custom-sources/ASC.Mail/ 2>/dev/null || echo "Could not copy DaoFactory.cs"
        cp module/ASC.Mail/ASC.Mail/Core/Engine/CrmLinkEngine.cs ./custom-package/opt/onlyoffice/CommunityServer/custom-sources/ASC.Mail/ 2>/dev/null || echo "Could not copy CrmLinkEngine.cs"
        cp module/ASC.Mail/ASC.Mail/Core/Engine/MessageEngine.cs ./custom-package/opt/onlyoffice/CommunityServer/custom-sources/ASC.Mail/ 2>/dev/null || echo "Could not copy MessageEngine.cs"
        cp module/ASC.Mail/ASC.Mail/Core/Dao/CrmContactDao.cs ./custom-package/opt/onlyoffice/CommunityServer/custom-sources/ASC.Mail/ 2>/dev/null || echo "Could not copy CrmContactDao.cs"
        cp module/ASC.Mail/ASC.Mail/Core/Dao/Interfaces/ICrmContactDao.cs ./custom-package/opt/onlyoffice/CommunityServer/custom-sources/ASC.Mail/ 2>/dev/null || echo "Could not copy ICrmContactDao.cs"
        
        # Create documentation
        cat > ./custom-package/opt/onlyoffice/CommunityServer/CUSTOM_MAIL_CHANGES.md << 'EOF'
        # Custom OnlyOffice Mail Module Changes
        
        ## Repository
        ${{ github.repository }}
        
        ## Commit
        ${{ github.sha }}
        
        ## Build Date
        $(date)
        
        ## Modified Files
        - module/ASC.Mail/ASC.Mail/Utils/MailAddressHelper.cs
        - module/ASC.Mail/ASC.Mail/Core/DaoFactory.cs  
        - module/ASC.Mail/ASC.Mail/Core/Engine/CrmLinkEngine.cs
        - module/ASC.Mail/ASC.Mail/Core/Engine/MessageEngine.cs
        - module/ASC.Mail/ASC.Mail/Core/Dao/CrmContactDao.cs
        - module/ASC.Mail/ASC.Mail/Core/Dao/Interfaces/ICrmContactDao.cs
        
        ## Changes
        Enhanced CRM integration for automatic email-to-contact linking.
        All incoming and outgoing emails are automatically added to CRM if contacts
        are found in the address book.
        
        ## Custom Source Files Location
        /opt/onlyoffice/CommunityServer/custom-sources/ASC.Mail/
        EOF
        
        echo "‚úÖ Custom package prepared with mail module changes"
        
    - name: Build custom Debian package
      run: |
        echo "Building custom Debian package..."
        
        # Update package metadata
        if [ -f "./custom-package/DEBIAN/control" ]; then
          sed -i 's/Package: onlyoffice-communityserver/Package: onlyoffice-communityserver-custom/' ./custom-package/DEBIAN/control
          sed -i "s/Version: .*/Version: ${{ env.ONLYOFFICE_VERSION }}-custom-mail-${{ github.run_number }}/" ./custom-package/DEBIAN/control
          sed -i '/^Description:/a \ Custom build with enhanced CRM email integration.' ./custom-package/DEBIAN/control
        fi
        
        # Build the custom package
        dpkg-deb --build ./custom-package onlyoffice-communityserver-custom.deb
        
        echo "‚úÖ Custom package built successfully"
        dpkg-deb --info onlyoffice-communityserver-custom.deb
        echo "üì¶ Custom package size: $(ls -lh onlyoffice-communityserver-custom.deb | awk '{print $5}')"
        
    - name: Upload custom package
      uses: actions/upload-artifact@v4
      with:
        name: onlyoffice-custom-mail-${{ github.run_number }}
        path: onlyoffice-communityserver-custom.deb
        retention-days: 30

  build-docker:
    needs: create-custom-package
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Download custom package
      uses: actions/download-artifact@v4
      with:
        name: onlyoffice-custom-mail-${{ github.run_number }}
        
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image
      run: |
        cat > Dockerfile << 'EOF'
        FROM ubuntu:20.04
        
        ENV DEBIAN_FRONTEND=noninteractive
        
        # Install dependencies
        RUN apt-get update && \
            apt-get install -y \
            wget curl apt-transport-https ca-certificates gnupg lsb-release \
            supervisor nginx mysql-client postgresql-client && \
            rm -rf /var/lib/apt/lists/*
            
        # Install .NET runtime
        RUN wget https://packages.microsoft.com/config/ubuntu/20.04/packages-microsoft-prod.deb -O packages-microsoft-prod.deb && \
            dpkg -i packages-microsoft-prod.deb && \
            apt-get update && \
            apt-get install -y dotnet-runtime-6.0 && \
            rm packages-microsoft-prod.deb && \
            rm -rf /var/lib/apt/lists/*
        
        # Install custom OnlyOffice package
        COPY onlyoffice-communityserver-custom.deb /tmp/
        RUN dpkg -i /tmp/onlyoffice-communityserver-custom.deb || apt-get install -f -y && \
            rm /tmp/onlyoffice-communityserver-custom.deb
        
        # Add labels for identification
        LABEL org.opencontainers.image.title="OnlyOffice Community Server - Custom Mail Integration"
        LABEL org.opencontainers.image.description="OnlyOffice with enhanced CRM email integration"
        LABEL org.opencontainers.image.source="${{ github.server_url }}/${{ github.repository }}"
        LABEL org.opencontainers.image.revision="${{ github.sha }}"
        
        EXPOSE 80 443 5222 9865 9888
        
        HEALTHCHECK --interval=30s --timeout=10s --start-period=120s \
          CMD curl -f http://localhost/ || exit 1
          
        CMD ["/usr/bin/supervisord", "-c", "/etc/supervisor/supervisord.conf"]
        EOF
        
        docker build -t onlyoffice-custom-mail:latest .
        docker save onlyoffice-custom-mail:latest | gzip > onlyoffice-custom-mail-image.tar.gz
        
    - name: Upload Docker image
      uses: actions/upload-artifact@v4
      with:
        name: onlyoffice-custom-mail-image-${{ github.run_number }}
        path: onlyoffice-custom-mail-image.tar.gz
        retention-days: 7
