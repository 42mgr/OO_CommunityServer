name: Build Custom OnlyOffice with Mail Module Changes

on:
  workflow_dispatch:

env:
  ONLYOFFICE_VERSION: "12.0.0"

jobs:
  download-and-prepare:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Cache OnlyOffice DEB package
      id: cache-deb
      uses: actions/cache@v4
      with:
        path: onlyoffice-communityserver.deb
        key: onlyoffice-deb-${{ env.ONLYOFFICE_VERSION }}-${{ hashFiles('.github/build-scripts/download-deb.sh') }}
        restore-keys: |
          onlyoffice-deb-${{ env.ONLYOFFICE_VERSION }}-
          onlyoffice-deb-
    
    - name: Install dependencies
      run: |
        echo "Installing required tools..."
        sudo apt-get update -qq
        sudo apt-get install -y wget curl jq file dpkg-dev
        
        echo "‚úÖ All dependencies ready"
        echo "Tool versions:"
        wget --version | head -1
        curl --version | head -1  
        jq --version
        file --version | head -1
        
    - name: Download official OnlyOffice package
      if: steps.cache-deb.outputs.cache-hit != 'true'
      run: |
        echo "Cache miss - downloading OnlyOffice package..."
        
        if [ -f ".github/build-scripts/download-deb.sh" ]; then
          chmod +x .github/build-scripts/download-deb.sh
          sudo ./.github/build-scripts/download-deb.sh
          
          if [ -f "onlyoffice-communityserver.deb" ] && [ -s "onlyoffice-communityserver.deb" ]; then
            echo "‚úÖ Successfully downloaded OnlyOffice package"
            dpkg-deb --info onlyoffice-communityserver.deb
            echo "üì¶ Package size: $(ls -lh onlyoffice-communityserver.deb | awk '{print $5}')"
          else
            echo "‚ùå Download failed"
            exit 1
          fi
        else
          echo "‚ùå Custom download script not found"
          exit 1
        fi
        
    - name: Verify cached package
      if: steps.cache-deb.outputs.cache-hit == 'true'
      run: |
        echo "‚úÖ Using cached OnlyOffice package"
        if [ -f "onlyoffice-communityserver.deb" ] && [ -s "onlyoffice-communityserver.deb" ]; then
          dpkg-deb --info onlyoffice-communityserver.deb
          echo "üì¶ Cached package size: $(ls -lh onlyoffice-communityserver.deb | awk '{print $5}')"
        else
          echo "‚ùå Cached package is invalid"
          exit 1
        fi
        
    - name: Extract official package
      run: |
        echo "Extracting official package..."
        dpkg-deb -x onlyoffice-communityserver.deb ./official-package/
        dpkg-deb -e onlyoffice-communityserver.deb ./official-package/DEBIAN/
        
        echo "Looking for existing mail module assemblies..."
        find ./official-package -name "ASC.Mail*" -type f || echo "No ASC.Mail files found"
        find ./official-package -name "ASC.Core*" -type f | head -5 || echo "No ASC.Core files found"
        
    - name: Upload extracted package
      uses: actions/upload-artifact@v4
      with:
        name: extracted-onlyoffice-package
        path: |
          onlyoffice-communityserver.deb
          official-package/
        retention-days: 1

  build-mail-module:
    needs: download-and-prepare
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
        
    - name: Setup .NET Framework and .NET SDK
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: |
          6.0.x
          7.0.x
          
    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v2
      
    - name: Setup NuGet
      uses: nuget/setup-nuget@v2
      
    - name: Download extracted package
      uses: actions/download-artifact@v4
      with:
        name: extracted-onlyoffice-package
        
    - name: Fix ALL project configurations before build
      shell: pwsh
      run: |
        Write-Host "Fixing MSBuild project configurations..."
        
        # Find ALL .csproj files, not just Mail.Server ones
        $allProjects = Get-ChildItem -Path "." -Name "*.csproj" -Recurse
        
        Write-Host "Found $($allProjects.Count) project files to check"
        
        foreach ($proj in $allProjects) {
          Write-Host "Checking project: $proj"
          
          if (Test-Path $proj) {
            $content = Get-Content $proj -Raw
            $modified = $false
            
            # Check if project has Release|Any CPU configuration
            if ($content -notmatch 'Release.*Any CPU') {
              Write-Host "Adding Release configuration to $proj"
              
              # Create the XML configuration piece by piece to avoid YAML issues
              $condition = 'Configuration)|$(Platform'
              $releaseXml = "  <PropertyGroup Condition=`"'`$($condition)' == 'Release|Any CPU'`">"
              $releaseXml += "`n    <OutputPath>bin\Release\</OutputPath>"
              $releaseXml += "`n    <DebugType>pdbonly</DebugType>"
              $releaseXml += "`n    <Optimize>true</Optimize>"
              $releaseXml += "`n    <PlatformTarget>AnyCPU</PlatformTarget>"
              $releaseXml += "`n    <WarningLevel>1</WarningLevel>"
              $releaseXml += "`n    <TreatWarningsAsErrors>false</TreatWarningsAsErrors>"
              $releaseXml += "`n  </PropertyGroup>"
              
              # Insert before closing Project tag
              $content = $content -replace '</Project>', ($releaseXml + "`n</Project>")
              $modified = $true
            }
            
            # Check if project has Debug|Any CPU configuration
            if ($content -notmatch 'Debug.*Any CPU') {
              Write-Host "Adding Debug configuration to $proj"
              
              $condition = 'Configuration)|$(Platform'
              $debugXml = "  <PropertyGroup Condition=`"'`$($condition)' == 'Debug|Any CPU'`">"
              $debugXml += "`n    <OutputPath>bin\Debug\</OutputPath>"
              $debugXml += "`n    <DebugSymbols>true</DebugSymbols>"
              $debugXml += "`n    <DebugType>full</DebugType>"
              $debugXml += "`n    <Optimize>false</Optimize>"
              $debugXml += "`n    <PlatformTarget>AnyCPU</PlatformTarget>"
              $debugXml += "`n    <WarningLevel>1</WarningLevel>"
              $debugXml += "`n    <TreatWarningsAsErrors>false</TreatWarningsAsErrors>"
              $debugXml += "`n  </PropertyGroup>"
              
              # Insert before closing Project tag
              $content = $content -replace '</Project>', ($debugXml + "`n</Project>")
              $modified = $true
            }
            
            if ($modified) {
              Set-Content -Path $proj -Value $content -Encoding UTF8
              Write-Host "‚úÖ Fixed configurations for $proj"
            } else {
              Write-Host "‚úÖ $proj already has proper configurations"
            }
          }
        }
        
        # Create Directory.Build.props for global fallback settings
        $buildPropsXml = "<Project>"
        $buildPropsXml += "`n  <PropertyGroup>"
        $buildPropsXml += "`n    <Platform Condition=`"`$(Platform) == ''`">AnyCPU</Platform>"
        $buildPropsXml += "`n    <Configuration Condition=`"`$(Configuration) == ''`">Release</Configuration>"
        $buildPropsXml += "`n    <TreatWarningsAsErrors>false</TreatWarningsAsErrors>"
        $buildPropsXml += "`n    <WarningLevel>1</WarningLevel>"
        $buildPropsXml += "`n  </PropertyGroup>"
        $buildPropsXml += "`n</Project>"
        
        Set-Content -Path "Directory.Build.props" -Value $buildPropsXml -Encoding UTF8
        Write-Host "‚úÖ Created Directory.Build.props"
        
    - name: Restore NuGet packages
      shell: pwsh
      run: |
        Write-Host "Restoring NuGet packages..."
        
        # Find and restore solution files first
        $slnFiles = Get-ChildItem -Name "*.sln" -Recurse
        
        if ($slnFiles) {
          foreach ($sln in $slnFiles) {
            Write-Host "Restoring packages for solution: $sln"
            try {
              nuget restore $sln -Verbosity normal -NonInteractive
            } catch {
              Write-Host "Warning: Failed to restore $sln - $($_.Exception.Message)"
            }
          }
        }
        
        # Also restore packages for mail module specifically
        if (Test-Path "module/ASC.Mail/ASC.Mail/packages.config") {
          Write-Host "Restoring packages for ASC.Mail module..."
          Set-Location "module/ASC.Mail/ASC.Mail"
          try {
            nuget restore packages.config -PackagesDirectory ../../../packages -Verbosity normal -NonInteractive
          } catch {
            Write-Host "Warning: Failed to restore mail module packages - $($_.Exception.Message)"
          }
          Set-Location "../../.."
        }
        
    - name: Build mail module with comprehensive approach
      shell: pwsh
      run: |
        Write-Host "Building ASC.Mail module..."
        
        # Try building the entire solution first if available
        $mailSolutions = Get-ChildItem -Name "*.sln" -Recurse | Where-Object { $_ -like "*Mail*" }
        
        if ($mailSolutions) {
          $sln = $mailSolutions[0]
          Write-Host "Attempting to build solution: $sln"
          
          try {
            msbuild $sln `
              /p:Configuration=Release `
              /p:Platform="Any CPU" `
              /p:TreatWarningsAsErrors=false `
              /p:WarningLevel=1 `
              /verbosity:normal `
              /maxcpucount `
              /nologo
              
            Write-Host "‚úÖ Solution build completed"
          } catch {
            Write-Host "‚ö†Ô∏è Solution build had issues: $($_.Exception.Message)"
          }
        }
        
        # Build the specific ASC.Mail project
        if (Test-Path "module/ASC.Mail/ASC.Mail/ASC.Mail.csproj") {
          Set-Location "module/ASC.Mail/ASC.Mail"
          
          Write-Host "Building ASC.Mail project..."
          try {
            msbuild ASC.Mail.csproj `
              /p:Configuration=Release `
              /p:Platform="Any CPU" `
              /p:TreatWarningsAsErrors=false `
              /p:WarningLevel=1 `
              /p:OutputPath="bin\Release\" `
              /verbosity:normal `
              /nologo
              
            if (Test-Path "bin/Release/ASC.Mail.dll") {
              Write-Host "‚úÖ Successfully built ASC.Mail.dll"
              Get-ChildItem bin/Release/ | Select-Object Name, Length, LastWriteTime
            } else {
              Write-Host "‚ùå ASC.Mail.dll not found after build"
            }
          } catch {
            Write-Host "‚ùå Build failed: $($_.Exception.Message)"
          }
          
          Set-Location "../../.."
        } else {
          Write-Host "‚ùå ASC.Mail.csproj not found at expected location"
        }
        
        # Try to build any other mail-related projects
        $otherMailProjects = Get-ChildItem -Name "*.csproj" -Recurse | Where-Object { $_ -like "*Mail*" }
        
        foreach ($mailProj in $otherMailProjects) {
          if ($mailProj -notlike "*ASC.Mail.csproj") {
            Write-Host "Attempting to build additional mail project: $mailProj"
            try {
              msbuild $mailProj `
                /p:Configuration=Release `
                /p:Platform="Any CPU" `
                /p:TreatWarningsAsErrors=false `
                /p:WarningLevel=1 `
                /verbosity:minimal `
                /nologo
            } catch {
              Write-Host "Warning: Failed to build $mailProj - $($_.Exception.Message)"
            }
          }
        }
        
    - name: Collect build outputs
      shell: pwsh
      run: |
        Write-Host "Collecting all build outputs..."
        
        # Find all built DLLs
        $allDlls = Get-ChildItem -Name "*.dll" -Recurse | Where-Object { $_ -like "*Mail*" }
        
        if ($allDlls) {
          Write-Host "Found built DLLs:"
          foreach ($dll in $allDlls) {
            $fullPath = Resolve-Path $dll
            $fileInfo = Get-Item $fullPath
            Write-Host "  $dll - $($fileInfo.Length) bytes - $($fileInfo.LastWriteTime)"
          }
        } else {
          Write-Host "‚ö†Ô∏è No Mail-related DLLs found"
        }
        
        # Create a summary of what was built
        $buildSummary = "Build completed at $(Get-Date)`n"
        $buildSummary += "Built assemblies:`n"
        foreach ($dll in $allDlls) {
          $buildSummary += "- $dll`n"
        }
        
        Set-Content -Path "build-summary.txt" -Value $buildSummary
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: built-mail-module-${{ github.run_number }}
        path: |
          module/ASC.Mail/ASC.Mail/bin/
          module/ASC.Mail/ASC.Mail/obj/
          **/bin/Release/*.dll
          build-summary.txt
        retention-days: 3

  create-custom-package:
    needs: [download-and-prepare, build-mail-module]
    runs-on: ubuntu-latest
    if: always() && needs.download-and-prepare.result == 'success'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
        
    - name: Download extracted package
      uses: actions/download-artifact@v4
      with:
        name: extracted-onlyoffice-package
        
    - name: Download build outputs
      uses: actions/download-artifact@v4
      continue-on-error: true
      with:
        name: built-mail-module-${{ github.run_number }}
        path: build-output/
        
    - name: Create custom package
      run: |
        echo "Creating custom package with mail module changes..."
        
        mkdir -p custom-package
        cp -r official-package/* custom-package/
        
        # Check if we have compiled DLLs
        echo "Looking for compiled mail module DLLs..."
        find build-output/ -name "*.dll" -type f | head -10
        
        if [ -f "build-output/module/ASC.Mail/ASC.Mail/bin/Release/ASC.Mail.dll" ]; then
          echo "‚úÖ Found compiled ASC.Mail.dll"
          
          # Find existing ASC.Mail.dll in the official package
          mail_dll_location=$(find ./custom-package -name "ASC.Mail.dll" -type f | head -1)
          
          if [ -n "$mail_dll_location" ]; then
            echo "Replacing ASC.Mail.dll at: $mail_dll_location"
            cp build-output/module/ASC.Mail/ASC.Mail/bin/Release/ASC.Mail.dll "$mail_dll_location"
            
            # Copy any additional mail-related DLLs
            find build-output/ -name "*Mail*.dll" -type f -exec cp {} "$(dirname "$mail_dll_location")/" \; 2>/dev/null || true
            echo "‚úÖ Updated mail module with compiled version"
          else
            echo "Creating new location for mail DLLs"
            mkdir -p ./custom-package/opt/onlyoffice/CommunityServer/bin/
            find build-output/ -name "*Mail*.dll" -type f -exec cp {} ./custom-package/opt/onlyoffice/CommunityServer/bin/ \; 2>/dev/null || true
          fi
        else
          echo "‚ö†Ô∏è No compiled DLL found - package will use original mail module"
        fi
        
        # Always include source files for transparency and documentation
        echo "Including modified source files..."
        mkdir -p ./custom-package/opt/onlyoffice/CommunityServer/custom-sources/ASC.Mail/
        
        # Copy your custom files with better error handling
        for src_file in \
          "module/ASC.Mail/ASC.Mail/Utils/MailAddressHelper.cs" \
          "module/ASC.Mail/ASC.Mail/Core/DaoFactory.cs" \
          "module/ASC.Mail/ASC.Mail/Core/Engine/CrmLinkEngine.cs" \
          "module/ASC.Mail/ASC.Mail/Core/Engine/MessageEngine.cs" \
          "module/ASC.Mail/ASC.Mail/Core/Dao/CrmContactDao.cs" \
          "module/ASC.Mail/ASC.Mail/Core/Dao/Interfaces/ICrmContactDao.cs"; do
          
          if [ -f "$src_file" ]; then
            cp "$src_file" ./custom-package/opt/onlyoffice/CommunityServer/custom-sources/ASC.Mail/
            echo "‚úì Copied $(basename "$src_file")"
          else
            echo "‚ö†Ô∏è Source file not found: $src_file"
          fi
        done
        
        # Include build summary if available
        if [ -f "build-output/build-summary.txt" ]; then
          cp build-output/build-summary.txt ./custom-package/opt/onlyoffice/CommunityServer/
        fi
        
        # Create comprehensive documentation
        cat > ./custom-package/opt/onlyoffice/CommunityServer/CUSTOM_CHANGES.md << EOF
        # Custom OnlyOffice Build
        
        **Repository:** ${{ github.repository }}
        **Commit:** ${{ github.sha }}
        **Build Number:** ${{ github.run_number }}
        **Build Date:** $(date)
        **OnlyOffice Version:** ${{ env.ONLYOFFICE_VERSION }}
        
        ## Modified Mail Module Files
        Enhanced CRM integration for automatic email-to-contact linking.
        All incoming and outgoing emails are automatically added to CRM if contacts
        are found in the address book.
        
        ### Modified Files:
        - Utils/MailAddressHelper.cs
        - Core/DaoFactory.cs  
        - Core/Engine/CrmLinkEngine.cs
        - Core/Engine/MessageEngine.cs
        - Core/Dao/CrmContactDao.cs
        - Core/Dao/Interfaces/ICrmContactDao.cs
        
        ### File Locations:
        - Custom source files: /opt/onlyoffice/CommunityServer/custom-sources/ASC.Mail/
        - Build summary: /opt/onlyoffice/CommunityServer/build-summary.txt
        
        ## Installation Notes
        This package includes both the compiled DLLs (if build succeeded) and source files
        for reference and potential manual compilation.
        EOF
        
        echo "‚úÖ Custom package prepared"
        
    - name: Build custom Debian package
      run: |
        echo "Building custom Debian package..."
        
        # Update control file metadata
        if [ -f "./custom-package/DEBIAN/control" ]; then
          sed -i 's/Package: onlyoffice-communityserver/Package: onlyoffice-communityserver-custom/' ./custom-package/DEBIAN/control
          sed -i "s/Version: .*/Version: ${{ env.ONLYOFFICE_VERSION }}-custom-${{ github.run_number }}/" ./custom-package/DEBIAN/control
          
          # Add custom description
          sed -i '/^Description:/a \ Custom build with enhanced CRM email integration.' ./custom-package/DEBIAN/control
          sed -i '/Custom build with enhanced CRM email integration./a \ This package includes modifications to the mail module for automatic' ./custom-package/DEBIAN/control
          sed -i '/This package includes modifications to the mail module for automatic/a \ email-to-contact linking in the CRM system.' ./custom-package/DEBIAN/control
        fi
        
        # Build the custom package
        dpkg-deb --build ./custom-package onlyoffice-communityserver-custom.deb
        
        echo "‚úÖ Custom package created successfully"
        dpkg-deb --info onlyoffice-communityserver-custom.deb
        echo "üì¶ Package size: $(ls -lh onlyoffice-communityserver-custom.deb | awk '{print $5}')"
        
    - name: Upload custom package
      uses: actions/upload-artifact@v4
      with:
        name: onlyoffice-custom-${{ github.run_number }}
        path: onlyoffice-communityserver-custom.deb
        retention-days: 30

  build-docker:
    needs: create-custom-package
    runs-on: ubuntu-latest
    if: needs.create-custom-package.result == 'success'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Download custom package
      uses: actions/download-artifact@v4
      with:
        name: onlyoffice-custom-${{ github.run_number }}
        
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image
      run: |
        cat > Dockerfile << 'EOF'
        FROM ubuntu:20.04
        
        ENV DEBIAN_FRONTEND=noninteractive
        
        # Install dependencies
        RUN apt-get update && \
            apt-get install -y \
            wget curl apt-transport-https ca-certificates gnupg lsb-release \
            supervisor nginx mysql-client postgresql-client && \
            rm -rf /var/lib/apt/lists/*
            
        # Install .NET runtime
        RUN wget https://packages.microsoft.com/config/ubuntu/20.04/packages-microsoft-prod.deb -O packages-microsoft-prod.deb && \
            dpkg -i packages-microsoft-prod.deb && \
            apt-get update && \
            apt-get install -y dotnet-runtime-6.0 && \
            rm packages-microsoft-prod.deb && \
            rm -rf /var/lib/apt/lists/*
        
        # Install custom OnlyOffice package
        COPY onlyoffice-communityserver-custom.deb /tmp/
        RUN dpkg -i /tmp/onlyoffice-communityserver-custom.deb || apt-get install -f -y && \
            rm /tmp/onlyoffice-communityserver-custom.deb
        
        # Add labels for identification
        LABEL org.opencontainers.image.title="OnlyOffice Community Server - Custom Mail Integration"
        LABEL org.opencontainers.image.description="OnlyOffice with enhanced CRM email integration"
        LABEL org.opencontainers.image.source="${{ github.server_url }}/${{ github.repository }}"
        LABEL org.opencontainers.image.revision="${{ github.sha }}"
        LABEL org.opencontainers.image.version="${{ env.ONLYOFFICE_VERSION }}-custom-${{ github.run_number }}"
        
        EXPOSE 80 443 5222 9865 9888
        
        HEALTHCHECK --interval=30s --timeout=10s --start-period=120s \
          CMD curl -f http://localhost/ || exit 1
          
        CMD ["/usr/bin/supervisord", "-c", "/etc/supervisor/supervisord.conf"]
        EOF
        
        docker build -t onlyoffice-custom-mail:${{ github.run_number }} .
        docker tag onlyoffice-custom-mail:${{ github.run_number }} onlyoffice-custom-mail:latest
        
        # Save the image
        docker save onlyoffice-custom-mail:latest | gzip > onlyoffice-custom-mail-image.tar.gz
        
        echo "‚úÖ Docker image built and saved"
        echo "üì¶ Image size: $(ls -lh onlyoffice-custom-mail-image.tar.gz | awk '{print $5}')"
        
    - name: Upload Docker image
      uses: actions/upload-artifact@v4
      with:
        name: onlyoffice-custom-mail-image-${{ github.run_number }}
        path: onlyoffice-custom-mail-image.tar.gz
        retention-days: 7
